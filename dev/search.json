[{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://larmarange.github.io/labelled/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"variable-labels","dir":"Articles","previous_headings":"","what":"Variable labels","title":"Introduction to labelled","text":"variable label specified vector using var_label(). ’s possible add variable label several columns data frame using named list. get variable label, simply call var_label(). remove variable label, use NULL. RStudio, variable labels displayed data viewer. can display search variable names labels look_for():","code":"library(labelled)  var_label(iris$Sepal.Length) <- \"Length of sepal\" var_label(iris) <- list(   Petal.Length = \"Length of petal\",   Petal.Width = \"Width of Petal\" ) var_label(iris$Petal.Width) ## [1] \"Width of Petal\" var_label(iris) ## $Sepal.Length ## [1] \"Length of sepal\" ##  ## $Sepal.Width ## NULL ##  ## $Petal.Length ## [1] \"Length of petal\" ##  ## $Petal.Width ## [1] \"Width of Petal\" ##  ## $Species ## NULL var_label(iris$Sepal.Length) <- NULL View(iris) look_for(iris) ##  pos variable     label           col_type missing values     ##  1   Sepal.Length —               dbl      0                  ##  2   Sepal.Width  —               dbl      0                  ##  3   Petal.Length Length of petal dbl      0                  ##  4   Petal.Width  Width of Petal  dbl      0                  ##  5   Species      —               fct      0       setosa     ##                                                    versicolor ##                                                    virginica look_for(iris, \"pet\") ##  pos variable     label           col_type missing values ##  3   Petal.Length Length of petal dbl      0              ##  4   Petal.Width  Width of Petal  dbl      0 look_for(iris, details = FALSE) ##  pos variable     label           ##  1   Sepal.Length —               ##  2   Sepal.Width  —               ##  3   Petal.Length Length of petal ##  4   Petal.Width  Width of Petal  ##  5   Species      —"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"value-labels","dir":"Articles","previous_headings":"","what":"Value labels","title":"Introduction to labelled","text":"first way create labelled vector use labelled() function. ’s mandatory provide label value observed vector. can also provide label values observed. Use val_labels() get value labels val_label() get value label associated specific value. val_labels() also used modify value labels attached vector, val_label() update one specific value label. val_label(), can also add remove specific value labels. remove value labels, use val_labels() NULL. haven_labelled class also removed. Adding value label non labelled vector apply haven_labelled class . Note applying val_labels() factor generate error! also apply val_labels() several columns data frame.","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 8, refused = 9) ) v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      8 don't know ##      9    refused val_labels(v) ##        yes         no don't know    refused  ##          1          3          8          9 val_label(v, 8) ## [1] \"don't know\" val_labels(v) <- c(yes = 1, nno = 3, bug = 5) v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes ##      3   nno ##      5   bug val_label(v, 3) <- \"no\" v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes ##      3    no ##      5   bug val_label(v, 2) <- \"maybe\" val_label(v, 5) <- NULL v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes ##      3    no ##      2 maybe val_labels(v) <- NULL v ##  [1]  1  2  2  2  3  9  1  3  2 NA val_label(v, 1) <- \"yes\" v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes f <- factor(1:3) f ## [1] 1 2 3 ## Levels: 1 2 3 val_labels(f) <- c(yes = 1, no = 3) ## Error in `val_labels<-`: ## ! Value labels cannot be applied to factors. df <- data.frame(v1 = 1:3, v2 = c(2, 3, 1), v3 = 3:1)  val_label(df, 1) <- \"yes\" val_label(df[, c(\"v1\", \"v3\")], 2) <- \"maybe\" val_label(df[, c(\"v2\", \"v3\")], 3) <- \"no\" val_labels(df) ## $v1 ##   yes maybe  ##     1     2  ##  ## $v2 ## yes  no  ##   1   3  ##  ## $v3 ##   yes maybe    no  ##     1     2     3 val_labels(df[, c(\"v1\", \"v3\")]) <- c(YES = 1, MAYBE = 2, NO = 3) val_labels(df) ## $v1 ##   YES MAYBE    NO  ##     1     2     3  ##  ## $v2 ## yes  no  ##   1   3  ##  ## $v3 ##   YES MAYBE    NO  ##     1     2     3 val_labels(df) <- NULL val_labels(df) ## $v1 ## NULL ##  ## $v2 ## NULL ##  ## $v3 ## NULL val_labels(df) <- list(v1 = c(yes = 1, no = 3), v2 = c(a = 1, b = 2, c = 3)) val_labels(df) ## $v1 ## yes  no  ##   1   3  ##  ## $v2 ## a b c  ## 1 2 3  ##  ## $v3 ## NULL"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"sorting-value-labels","dir":"Articles","previous_headings":"","what":"Sorting value labels","title":"Introduction to labelled","text":"Value labels sorted default order created. useful reorder value labels according attached values, sort_val_labels(). prefer, can also sort according labels.","code":"v <- c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA) val_label(v, 1) <- \"yes\" val_label(v, 3) <- \"no\" val_label(v, 9) <- \"refused\" val_label(v, 2) <- \"maybe\" val_label(v, 8) <- \"don't know\" v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9    refused ##      2      maybe ##      8 don't know sort_val_labels(v) ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      2      maybe ##      3         no ##      8 don't know ##      9    refused sort_val_labels(v, decreasing = TRUE) ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      9    refused ##      8 don't know ##      3         no ##      2      maybe ##      1        yes sort_val_labels(v, according_to = \"l\") ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      8 don't know ##      2      maybe ##      3         no ##      9    refused ##      1        yes"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"user-defined-missing-values-spsss-style","dir":"Articles","previous_headings":"","what":"User defined missing values (SPSS’s style)","title":"Introduction to labelled","text":"haven (>= 2.0.0) introduced additional haven_labelled_spss class deal user defined missing values. case, additional attributes used indicate values considered missing, values stored internal NA values. note R function take information account. Therefore, convert missing values NA required analysis. defined missing values co-exist internal NA values. possible manipulate missing values na_values() na_range(). Note .na() return TRUE well user-defined missing values. Since version 2.1.0, mandatory define least one value label defining missing values. convert user defined missing values NA, simply use user_na_to_na(). can also remove user missing values definition without converting values NA. ","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 9) ) v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know na_values(v) <- 9 na_values(v) ## [1] 9 v ## <labelled_spss<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ## Missing values: 9 ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know is.na(v) ##  [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE na_values(v) <- NULL v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know na_range(v) <- c(5, Inf) na_range(v) ## [1]   5 Inf v ## <labelled_spss<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ## Missing range:  [5, Inf] ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know x <- c(1, 2, 2, 9) na_values(x) <- 9 x ## <labelled_spss<double>[4]> ## [1] 1 2 2 9 ## Missing values: 9 v <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10)) v ## <labelled_spss<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8  9 10 ## Missing values: 9, 10 ##  ## Labels: ##  value label ##      1  Good ##      8   Bad v2 <- user_na_to_na(v) v2 ## <labelled<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8 NA NA ##  ## Labels: ##  value label ##      1  Good ##      8   Bad v <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10)) v ## <labelled_spss<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8  9 10 ## Missing values: 9, 10 ##  ## Labels: ##  value label ##      1  Good ##      8   Bad v2 <- remove_user_na(v) v2 ## <labelled<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8  9 10 ##  ## Labels: ##  value label ##      1  Good ##      8   Bad v <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10)) v ## <labelled_spss<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8  9 10 ## Missing values: 9, 10 ##  ## Labels: ##  value label ##      1  Good ##      8   Bad na_values(v) <- NULL v ## <labelled<integer>[10]> ##  [1]  1  2  3  4  5  6  7  8  9 10 ##  ## Labels: ##  value label ##      1  Good ##      8   Bad"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"other-conversion-to-na","dir":"Articles","previous_headings":"","what":"Other conversion to NA","title":"Introduction to labelled","text":"cases, values don’t attached value label considered missing. nolabel_to_na() convert NA. cases, value label attached specific values corresponds missing value. example: cases, val_labels_to_na() appropriate. two functions also applied overall data frame. labelled vectors impacted.","code":"v <- labelled(c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA), c(yes = 1, maybe = 2, no = 3)) v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes ##      2 maybe ##      3    no nolabel_to_na(v) ## <labelled<double>[10]> ##  [1]  1  2  2  2  3 NA  1  3  2 NA ##  ## Labels: ##  value label ##      1   yes ##      2 maybe ##      3    no size <- labelled(c(1.88, 1.62, 1.78, 99, 1.91), c(\"not measured\" = 99)) size ## <labelled<double>[5]> ## [1]  1.88  1.62  1.78 99.00  1.91 ##  ## Labels: ##  value        label ##     99 not measured val_labels_to_na(size) ## [1] 1.88 1.62 1.78   NA 1.91"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"converting-to-factor","dir":"Articles","previous_headings":"","what":"Converting to factor","title":"Introduction to labelled","text":"labelled vector easily converted factor to_factor(). levels argument allows specify used factor levels, .e. labels (default), values labels prefixed values. ordered argument create ordinal factor. argument nolabel_to_na specify corresponding function applied converting factor. Therefore, two following commands equivalent. sort_levels specifies levels sorted: \"none\" keep order value labels defined, \"values\" order levels according values \"labels\" according labels. \"auto\" (default) equivalent \"none\" except values attached labels found dropped. case, \"values\" used. function to_labelled() used turn factor labelled numeric vector. Note to_labelled(to_factor(v)) equal v due way factors stored internally R.","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 8, refused = 9) ) v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      8 don't know ##      9    refused to_factor(v) ##  [1] yes     2       2       2       no      refused yes     no      2       ## [10] <NA>    ## Levels: yes 2 no don't know refused to_factor(v, levels = \"v\") ##  [1] 1    2    2    2    3    9    1    3    2    <NA> ## Levels: 1 2 3 8 9 to_factor(v, levels = \"p\") ##  [1] [1] yes     [2] 2       [2] 2       [2] 2       [3] no      [9] refused ##  [7] [1] yes     [3] no      [2] 2       <NA>        ## Levels: [1] yes [2] 2 [3] no [8] don't know [9] refused to_factor(v, ordered = TRUE) ##  [1] yes     2       2       2       no      refused yes     no      2       ## [10] <NA>    ## Levels: yes < 2 < no < don't know < refused to_factor(v, nolabel_to_na = TRUE) ##  [1] yes     <NA>    <NA>    <NA>    no      refused yes     no      <NA>    ## [10] <NA>    ## Levels: yes no don't know refused to_factor(nolabel_to_na(v)) ##  [1] yes     <NA>    <NA>    <NA>    no      refused yes     no      <NA>    ## [10] <NA>    ## Levels: yes no don't know refused to_factor(v, sort_levels = \"n\") ##  [1] yes     2       2       2       no      refused yes     no      2       ## [10] <NA>    ## Levels: yes no don't know refused 2 to_factor(v, sort_levels = \"v\") ##  [1] yes     2       2       2       no      refused yes     no      2       ## [10] <NA>    ## Levels: yes 2 no don't know refused to_factor(v, sort_levels = \"l\") ##  [1] yes     2       2       2       no      refused yes     no      2       ## [10] <NA>    ## Levels: 2 don't know no refused yes f <- factor(1:3, labels = c(\"a\", \"b\", \"c\")) to_labelled(f) ## <labelled<double>[3]> ## [1] 1 2 3 ##  ## Labels: ##  value label ##      1     a ##      2     b ##      3     c v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      8 don't know ##      9    refused to_labelled(to_factor(v)) ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  5  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      2          2 ##      3         no ##      4 don't know ##      5    refused"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"other-type-of-conversions","dir":"Articles","previous_headings":"","what":"Other type of conversions","title":"Introduction to labelled","text":"can use to_character() converting character vector instead factor. remove haven_class, can simply use unclass(). Note value labels preserved attribute vector. remove value labels, use remove_val_labels(). Note vector user-defined missing values, may also want use remove_user_na(). can remove labels user-defined missing values remove_labels(). Use keep_var_label = TRUE preserve variable label.","code":"v ## <labelled<double>[10]> ##  [1]  1  2  2  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      8 don't know ##      9    refused to_character(v) ##  [1] \"yes\"     \"2\"       \"2\"       \"2\"       \"no\"      \"refused\" \"yes\"     ##  [8] \"no\"      \"2\"       NA unclass(v) ##  [1]  1  2  2  2  3  9  1  3  2 NA ## attr(,\"labels\") ##        yes         no don't know    refused  ##          1          3          8          9 remove_val_labels(v) ##  [1]  1  2  2  2  3  9  1  3  2 NA remove_val_labels(v) ##  [1]  1  2  2  2  3  9  1  3  2 NA x <- c(1, 2, 2, 9) na_values(x) <- 9 val_labels(x) <- c(yes = 1, no = 2) var_label(x) <- \"A test variable\" x ## <labelled_spss<double>[4]>: A test variable ## [1] 1 2 2 9 ## Missing values: 9 ##  ## Labels: ##  value label ##      1   yes ##      2    no remove_val_labels(x) ## <labelled_spss<double>[4]>: A test variable ## [1] 1 2 2 9 ## Missing values: 9 remove_user_na(x) ## <labelled<double>[4]>: A test variable ## [1] 1 2 2 9 ##  ## Labels: ##  value label ##      1   yes ##      2    no remove_user_na(x, user_na_to_na = TRUE) ## <labelled<double>[4]>: A test variable ## [1]  1  2  2 NA ##  ## Labels: ##  value label ##      1   yes ##      2    no remove_val_labels(remove_user_na(x)) ## [1] 1 2 2 9 ## attr(,\"label\") ## [1] \"A test variable\" unclass(x) ## [1] 1 2 2 9 ## attr(,\"labels\") ## yes  no  ##   1   2  ## attr(,\"na_values\") ## [1] 9 ## attr(,\"label\") ## [1] \"A test variable\" remove_labels(x, user_na_to_na = TRUE) ## [1]  1  2  2 NA remove_labels(x, user_na_to_na = TRUE, keep_var_label = TRUE) ## [1]  1  2  2 NA ## attr(,\"label\") ## [1] \"A test variable\""},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"unlabelled","dir":"Articles","previous_headings":"","what":"Conditional conversion to factors","title":"Introduction to labelled","text":"analysis, responsibility user identify labelled numeric vectors considered categorical (therefore converted factors using to_factor()) variables treated continuous (therefore unclassed numeric using base::unclass()). noted functions expect categorical variables coded factors. includes modeling functions (stats::lm() stats::glm()) plotting functions ggplot2. cases, data documentation properly done, categorical variables corresponds vectors observed values value label vectors values value label considered continuous. situation, apply unlabelled() method overall data frame. default, unlabelled() works follow: column doesn’t inherit haven_labelled class, affected; observed values corresponding value label, column converted factor (using to_factor()); otherwise, column unclassed (converted back numeric character vector applying base::unclass()).","code":"df <- data.frame(   a = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2)),   b = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2, DK = 3)),   c = labelled(c(1, 1, 2, 2), labels = c(No = 1, Yes = 2, DK = 3)),   d = labelled(c(\"a\", \"a\", \"b\", \"c\"), labels = c(No = \"a\", Yes = \"b\")),   e = labelled_spss(     c(1, 9, 1, 2),     labels = c(No = 1, Yes = 2),     na_values = 9   ) ) df %>% look_for() ##  pos variable label col_type missing values  ##  1   a        —     dbl+lbl  0       [1] No  ##                                      [2] Yes ##  2   b        —     dbl+lbl  0       [1] No  ##                                      [2] Yes ##                                      [3] DK  ##  3   c        —     dbl+lbl  0       [1] No  ##                                      [2] Yes ##                                      [3] DK  ##  4   d        —     chr+lbl  0       [a] No  ##                                      [b] Yes ##  5   e        —     dbl+lbl  1       [1] No  ##                                      [2] Yes unlabelled(df) %>% look_for() ##  pos variable label col_type missing values ##  1   a        —     dbl      0              ##  2   b        —     fct      0       No     ##                                      Yes    ##                                      DK     ##  3   c        —     fct      0       No     ##                                      Yes    ##                                      DK     ##  4   d        —     chr      0              ##  5   e        —     fct      1       No     ##                                      Yes unlabelled(df, user_na_to_na = TRUE) %>% look_for() ##  pos variable label col_type missing values ##  1   a        —     dbl      0              ##  2   b        —     fct      0       No     ##                                      Yes    ##                                      DK     ##  3   c        —     fct      0       No     ##                                      Yes    ##                                      DK     ##  4   d        —     chr      0              ##  5   e        —     fct      1       No     ##                                      Yes unlabelled(df, drop_unused_labels = TRUE) %>% look_for() ##  pos variable label col_type missing values ##  1   a        —     dbl      0              ##  2   b        —     fct      0       No     ##                                      Yes    ##                                      DK     ##  3   c        —     fct      0       No     ##                                      Yes    ##  4   d        —     chr      0              ##  5   e        —     fct      1       No     ##                                      Yes"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"importing-labelled-data","dir":"Articles","previous_headings":"","what":"Importing labelled data","title":"Introduction to labelled","text":"haven package, read_spss, read_stata read_sas natively importing data using labelled class label attribute variable labels. Functions foreign package also import metadata SPSS Stata files. to_labelled can convert data imported foreign labelled data frame. However, limitations compared using haven: SPSS files, better set use.value.labels = FALSE, .data.frame = FALSE use.missings = FALSE calling read.spss. use.value.labels = TRUE, variable value labels converted factors read.spss (kept factors foreign_to_label). .data.frame = TRUE, meta data describing missing values imported. use.missings = TRUE, missing values converted NA read.spss. Stata files, set convert.factors = FALSE calling read.dta avoid conversion variables value labels factors. far, missing values defined Stata always imported NA read.dta retrieved foreign_to_labelled. memisc package provide functions import variable metadata store specific object class data.set. to_labelled method can convert data.set labelled data frame.","code":"# from foreign library(foreign) df <- to_labelled(read.spss(   \"file.sav\",   to.data.frame = FALSE,   use.value.labels = FALSE,   use.missings = FALSE )) df <- to_labelled(read.dta(   \"file.dta\",   convert.factors = FALSE ))  # from memisc library(memisc) nes1948.por <- UnZip(\"anes/NES1948.ZIP\", \"NES1948.POR\", package = \"memisc\") nes1948 <- spss.portable.file(nes1948.por) df <- to_labelled(nes1948) ds <- as.data.set(nes19480) df <- to_labelled(ds)"},{"path":"https://larmarange.github.io/labelled/dev/articles/labelled.html","id":"using-labelled-with-dplyrmagrittr","dir":"Articles","previous_headings":"","what":"Using labelled with dplyr/magrittr","title":"Introduction to labelled","text":"using %>% operator, can use functions set_variable_labels(), set_value_labels(), add_value_labels() remove_value_labels(). set_value_labels() replace list value labels add_value_labels() update . can also remove variable /value labels. convert variables, easiest use unlabelled(). Alternatively, can use functions dplyr::mutate() + dplyr::across(). See example .","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union df <- tibble(s1 = c(\"M\", \"M\", \"F\"), s2 = c(1, 1, 2)) %>%   set_variable_labels(s1 = \"Sex\", s2 = \"Question\") %>%   set_value_labels(s1 = c(Male = \"M\", Female = \"F\"), s2 = c(Yes = 1, No = 2)) df$s2 ## <labelled<double>[3]>: Question ## [1] 1 1 2 ##  ## Labels: ##  value label ##      1   Yes ##      2    No df <- df %>%   set_value_labels(s2 = c(Yes = 1, \"Don't know\" = 8, Unknown = 9)) df$s2 ## <labelled<double>[3]>: Question ## [1] 1 1 2 ##  ## Labels: ##  value      label ##      1        Yes ##      8 Don't know ##      9    Unknown df <- df %>%   add_value_labels(s2 = c(No = 2)) df$s2 ## <labelled<double>[3]>: Question ## [1] 1 1 2 ##  ## Labels: ##  value      label ##      1        Yes ##      8 Don't know ##      9    Unknown ##      2         No df <- df %>%   set_variable_labels(s1 = NULL)  # removing one value label df <- df %>%   remove_value_labels(s2 = 2) df$s2 ## <labelled<double>[3]>: Question ## [1] 1 1 2 ##  ## Labels: ##  value      label ##      1        Yes ##      8 Don't know ##      9    Unknown # removing several value labels df <- df %>%   remove_value_labels(s2 = 8:9) df$s2 ## <labelled<double>[3]>: Question ## [1] 1 1 2 ##  ## Labels: ##  value label ##      1   Yes # removing all value labels df <- df %>%   set_value_labels(s2 = NULL) df$s2 ## [1] 1 1 2 ## attr(,\"label\") ## [1] \"Question\" library(questionr) data(fertility) glimpse(women) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <dbl+lbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ region            <dbl+lbl> 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, … ## $ instruction       <dbl+lbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, … ## $ employed          <dbl+lbl> 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ matri             <dbl+lbl> 0, 2, 2, 2, 1, 0, 1, 1, 2, 5, 2, 3, 0, 2, 1, 2, … ## $ religion          <dbl+lbl> 1, 3, 2, 3, 2, 2, 3, 1, 3, 3, 2, 3, 2, 2, 2, 2, … ## $ newspaper         <dbl+lbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, … ## $ radio             <dbl+lbl> 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, … ## $ tv                <dbl+lbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, … ## $ ideal_nb_children <dbl+lbl>  4,  4,  4,  4,  4,  5, 10,  5,  4,  5,  6, 10, … ## $ test              <dbl+lbl> 0, 9, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, … glimpse(women %>% unlabelled()) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <fct> rural, rural, rural, rural, rural, rural, rural, rur… ## $ region            <fct> West, West, West, West, West, South, South, South, S… ## $ instruction       <fct> none, none, none, none, primary, none, none, none, n… ## $ employed          <fct> yes, yes, no, yes, yes, no, yes, no, yes, yes, yes, … ## $ matri             <fct> single, living together, living together, living tog… ## $ religion          <fct> Muslim, Protestant, Christian, Protestant, Christian… ## $ newspaper         <fct> no, no, no, no, no, no, no, no, no, no, no, no, no, … ## $ radio             <fct> no, yes, yes, no, no, yes, yes, no, no, no, yes, yes… ## $ tv                <fct> no, no, no, no, no, yes, no, no, no, no, yes, yes, n… ## $ ideal_nb_children <dbl> 4, 4, 4, 4, 4, 5, 10, 5, 4, 5, 6, 10, 2, 6, 6, 6, 4,… ## $ test              <fct> no, missing, no, no, yes, no, no, no, no, yes, yes, … glimpse(to_factor(women)) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <fct> rural, rural, rural, rural, rural, rural, rural, rur… ## $ region            <fct> West, West, West, West, West, South, South, South, S… ## $ instruction       <fct> none, none, none, none, primary, none, none, none, n… ## $ employed          <fct> yes, yes, no, yes, yes, no, yes, no, yes, yes, yes, … ## $ matri             <fct> single, living together, living together, living tog… ## $ religion          <fct> Muslim, Protestant, Christian, Protestant, Christian… ## $ newspaper         <fct> no, no, no, no, no, no, no, no, no, no, no, no, no, … ## $ radio             <fct> no, yes, yes, no, no, yes, yes, no, no, no, yes, yes… ## $ tv                <fct> no, no, no, no, no, yes, no, no, no, no, yes, yes, n… ## $ ideal_nb_children <fct> 4, 4, 4, 4, 4, 5, 10, 5, 4, 5, 6, 10, 2, 6, 6, 6, 4,… ## $ test              <fct> no, missing, no, no, yes, no, no, no, no, yes, yes, … glimpse(women %>% mutate(across(where(is.labelled), to_factor))) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <fct> rural, rural, rural, rural, rural, rural, rural, rur… ## $ region            <fct> West, West, West, West, West, South, South, South, S… ## $ instruction       <fct> none, none, none, none, primary, none, none, none, n… ## $ employed          <fct> yes, yes, no, yes, yes, no, yes, no, yes, yes, yes, … ## $ matri             <fct> single, living together, living together, living tog… ## $ religion          <fct> Muslim, Protestant, Christian, Protestant, Christian… ## $ newspaper         <fct> no, no, no, no, no, no, no, no, no, no, no, no, no, … ## $ radio             <fct> no, yes, yes, no, no, yes, yes, no, no, no, yes, yes… ## $ tv                <fct> no, no, no, no, no, yes, no, no, no, no, yes, yes, n… ## $ ideal_nb_children <fct> 4, 4, 4, 4, 4, 5, 10, 5, 4, 5, 6, 10, 2, 6, 6, 6, 4,… ## $ test              <fct> no, missing, no, no, yes, no, no, no, no, yes, yes, … glimpse(women %>% mutate(across(employed:religion, to_factor))) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <dbl+lbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ region            <dbl+lbl> 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, … ## $ instruction       <dbl+lbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, … ## $ employed          <fct> yes, yes, no, yes, yes, no, yes, no, yes, yes, yes, … ## $ matri             <fct> single, living together, living together, living tog… ## $ religion          <fct> Muslim, Protestant, Christian, Protestant, Christian… ## $ newspaper         <dbl+lbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, … ## $ radio             <dbl+lbl> 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, … ## $ tv                <dbl+lbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, … ## $ ideal_nb_children <dbl+lbl>  4,  4,  4,  4,  4,  5, 10,  5,  4,  5,  6, 10, … ## $ test              <dbl+lbl> 0, 9, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, …"},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"default-printing-of-tibbles","dir":"Articles","previous_headings":"Showing a summary of a data frame","what":"Default printing of tibbles","title":"Generate a data dictionary and search for variables with `look_for()`","text":"common need easily get description variables data frame. data frame converted tibble (e.g. dplyr::as_tibble()), nice printing showing first rows data frame well type column. However, many variables, printed just listed. Note: R console, value labels (defined) usually printed appear R markdown document like vignette.","code":"library(dplyr) iris %>% as_tibble() ## # A tibble: 150 × 5 ##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species ##           <dbl>       <dbl>        <dbl>       <dbl> <fct>   ##  1          5.1         3.5          1.4         0.2 setosa  ##  2          4.9         3            1.4         0.2 setosa  ##  3          4.7         3.2          1.3         0.2 setosa  ##  4          4.6         3.1          1.5         0.2 setosa  ##  5          5           3.6          1.4         0.2 setosa  ##  6          5.4         3.9          1.7         0.4 setosa  ##  7          4.6         3.4          1.4         0.3 setosa  ##  8          5           3.4          1.5         0.2 setosa  ##  9          4.4         2.9          1.4         0.2 setosa  ## 10          4.9         3.1          1.5         0.1 setosa  ## # ℹ 140 more rows data(fertility, package = \"questionr\") women ## # A tibble: 2,000 × 17 ##    id_woman id_household weight interview_date date_of_birth   age  residency ##       <dbl>        <dbl>  <dbl> <date>         <date>        <dbl> <hvn_lbll> ##  1      391          381  1.80  2012-05-05     1997-03-07       15          2 ##  2     1643         1515  1.80  2012-01-23     1982-01-06       30          2 ##  3       85           85  1.80  2012-01-21     1979-01-01       33          2 ##  4      881          844  1.80  2012-01-06     1968-03-29       43          2 ##  5     1981         1797  1.80  2012-05-11     1986-05-25       25          2 ##  6     1072         1015  0.998 2012-02-20     1993-07-03       18          2 ##  7     1978         1794  0.998 2012-02-23     1967-01-28       45          2 ##  8     1607         1486  0.998 2012-02-20     1989-01-21       23          2 ##  9      738          711  0.192 2012-03-09     1962-07-24       49          2 ## 10     1656         1525  0.192 2012-03-15     1980-12-25       31          2 ## # ℹ 1,990 more rows ## # ℹ 10 more variables: region <hvn_lbll>, instruction <hvn_lbll>, ## #   employed <hvn_lbl_>, matri <hvn_lbll>, religion <hvn_lbll>, ## #   newspaper <hvn_lbll>, radio <hvn_lbll>, tv <hvn_lbll>, ## #   ideal_nb_children <hvn_lbl_>, test <hvn_lbl_>"},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"dplyrglimpse","dir":"Articles","previous_headings":"Showing a summary of a data frame","what":"dplyr::glimpse()","title":"Generate a data dictionary and search for variables with `look_for()`","text":"function dplyr::glimpse() allows quick look variables data frame. show first values variable well type variable. However, important informations displayed: variable labels, defined; value labels labelled vectors; list levels factors; range values numerical variables.","code":"glimpse(iris) ## Rows: 150 ## Columns: 5 ## $ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… glimpse(women) ## Rows: 2,000 ## Columns: 17 ## $ id_woman          <dbl> 391, 1643, 85, 881, 1981, 1072, 1978, 1607, 738, 165… ## $ id_household      <dbl> 381, 1515, 85, 844, 1797, 1015, 1794, 1486, 711, 152… ## $ weight            <dbl> 1.803150, 1.803150, 1.803150, 1.803150, 1.803150, 0.… ## $ interview_date    <date> 2012-05-05, 2012-01-23, 2012-01-21, 2012-01-06, 201… ## $ date_of_birth     <date> 1997-03-07, 1982-01-06, 1979-01-01, 1968-03-29, 198… ## $ age               <dbl> 15, 30, 33, 43, 25, 18, 45, 23, 49, 31, 26, 45, 25, … ## $ residency         <hvn_lbll> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ region            <hvn_lbll> 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2,… ## $ instruction       <hvn_lbll> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0,… ## $ employed          <hvn_lbl_> 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ matri             <hvn_lbll> 0, 2, 2, 2, 1, 0, 1, 1, 2, 5, 2, 3, 0, 2, 1, 2,… ## $ religion          <hvn_lbll> 1, 3, 2, 3, 2, 2, 3, 1, 3, 3, 2, 3, 2, 2, 2, 2,… ## $ newspaper         <hvn_lbll> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,… ## $ radio             <hvn_lbll> 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0,… ## $ tv                <hvn_lbll> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,… ## $ ideal_nb_children <hvn_lbl_> 4, 4, 4, 4, 4, 5, 10, 5, 4, 5, 6, 10, 2, 6, 6, … ## $ test              <hvn_lbl_> 0, 9, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,…"},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"labelledlook_for","dir":"Articles","previous_headings":"Showing a summary of a data frame","what":"labelled::look_for()","title":"Generate a data dictionary and search for variables with `look_for()`","text":"look_for() provided labelled package print console data dictionary variables, showing variable labels available, type variable list values corresponding : levels factors; value labels labelled vectors; range observed values vector otherwise (details = \"full\"). Note lookfor() generate_dictionary() synonyms look_for() works exactly way. enough space print full labels console, truncated (truncation indicated ~). get nicely formatted table look_for(), use to_gt() (gt package required). [1] urban [2] rural [1] North [2] East [3] South [4] West [0] none [1] primary [2] secondary [3] higher [0] [1] yes [9] missing [0] single [1] married [2] living together [3] windowed [4] divorced [5] separated [1] Muslim [2] Christian [3] Protestant [4] religion [5] [0] [1] yes [0] [1] yes [0] [1] yes [96] don’t know [99] missing [0] [1] yes [9] missing","code":"library(labelled) look_for(iris) ##  pos variable     label col_type missing values     ##  1   Sepal.Length —     dbl      0                  ##  2   Sepal.Width  —     dbl      0                  ##  3   Petal.Length —     dbl      0                  ##  4   Petal.Width  —     dbl      0                  ##  5   Species      —     fct      0       setosa     ##                                          versicolor ##                                          virginica look_for(women) ##  pos variable          label              col_type missing values             ##  1   id_woman          Woman Id           dbl      0                          ##  2   id_household      Household Id       dbl      0                          ##  3   weight            Sample weight      dbl      0                          ##  4   interview_date    Interview date     date     0                          ##  5   date_of_birth     Date of birth      date     0                          ##  6   age               Age at last anniv~ dbl      0                          ##  7   residency         Urban / rural res~ dbl+lbl  0       [1] urban          ##                                                            [2] rural          ##  8   region            Region             dbl+lbl  0       [1] North          ##                                                            [2] East           ##                                                            [3] South          ##                                                            [4] West           ##  9   instruction       Level of instruct~ dbl+lbl  0       [0] none           ##                                                            [1] primary        ##                                                            [2] secondary      ##                                                            [3] higher         ##  10  employed          Employed?          dbl+lbl  7       [0] no             ##                                                            [1] yes            ##                                                            [9] missing        ##  11  matri             Matrimonial status dbl+lbl  0       [0] single         ##                                                            [1] married        ##                                                            [2] living togeth~ ##                                                            [3] windowed       ##                                                            [4] divorced       ##                                                            [5] separated      ##  12  religion          Religion           dbl+lbl  4       [1] Muslim         ##                                                            [2] Christian      ##                                                            [3] Protestant     ##                                                            [4] no religion    ##                                                            [5] other          ##  13  newspaper         Read newspaper?    dbl+lbl  0       [0] no             ##                                                            [1] yes            ##  14  radio             Listen to radio?   dbl+lbl  0       [0] no             ##                                                            [1] yes            ##  15  tv                Watch TV?          dbl+lbl  0       [0] no             ##                                                            [1] yes            ##  16  ideal_nb_children Ideal number of c~ dbl+lbl  0       [96] don't know    ##                                                            [99] missing       ##  17  test              Ever tested for H~ dbl+lbl  29      [0] no             ##                                                            [1] yes            ##                                                            [9] missing women %>%   look_for() %>%   to_gt()"},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"searching-variables-by-key","dir":"Articles","previous_headings":"","what":"Searching variables by key","title":"Generate a data dictionary and search for variables with `look_for()`","text":"data frame dozens even hundreds variables, become difficult find specific variable. case, can provide optional list keywords, can simple character strings regular expression, search specific variables. default, look_for() look variable names variables labels. Use labels = FALSE look variable names. Similarly, search default case insensitive. make search case sensitive, use ignore.case = FALSE.","code":"# Look for a single keyword. look_for(iris, \"petal\") ##  pos variable     label col_type missing values ##  3   Petal.Length —     dbl      0              ##  4   Petal.Width  —     dbl      0 look_for(iris, \"s\") ##  pos variable     label col_type missing values     ##  1   Sepal.Length —     dbl      0                  ##  2   Sepal.Width  —     dbl      0                  ##  5   Species      —     fct      0       setosa     ##                                          versicolor ##                                          virginica # Look for with a regular expression look_for(iris, \"petal|species\") ##  pos variable     label col_type missing values     ##  3   Petal.Length —     dbl      0                  ##  4   Petal.Width  —     dbl      0                  ##  5   Species      —     fct      0       setosa     ##                                          versicolor ##                                          virginica look_for(iris, \"s$\") ##  pos variable label col_type missing values     ##  5   Species  —     fct      0       setosa     ##                                      versicolor ##                                      virginica # Look for with several keywords look_for(iris, \"pet\", \"sp\") ##  pos variable     label col_type missing values     ##  3   Petal.Length —     dbl      0                  ##  4   Petal.Width  —     dbl      0                  ##  5   Species      —     fct      0       setosa     ##                                          versicolor ##                                          virginica # Look_for will take variable labels into account look_for(women, \"read\", \"level\") ##  pos variable    label                col_type missing values        ##  9   instruction Level of instruction dbl+lbl  0       [0] none      ##                                                        [1] primary   ##                                                        [2] secondary ##                                                        [3] higher    ##  13  newspaper   Read newspaper?      dbl+lbl  0       [0] no        ##                                                        [1] yes look_for(women, \"read\") ##  pos variable  label           col_type missing values  ##  13  newspaper Read newspaper? dbl+lbl  0       [0] no  ##                                                 [1] yes look_for(women, \"read\", labels = FALSE) ## ! Nothing found. Sorry. look_for(iris, \"sepal\") ##  pos variable     label col_type missing values ##  1   Sepal.Length —     dbl      0              ##  2   Sepal.Width  —     dbl      0 look_for(iris, \"sepal\", ignore.case = FALSE) ## ! Nothing found. Sorry."},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"level-of-details","dir":"Articles","previous_headings":"","what":"Level of details","title":"Generate a data dictionary and search for variables with `look_for()`","text":"just want use search feature look_for() without computing details variable, simply indicate details = \"none\" details = FALSE. want details (can time consuming big data frames), indicate details = \"full\" details = TRUE. [1] urban [2] rural [1] North [2] East [3] South [4] West [0] none [1] primary [2] secondary [3] higher [0] [1] yes [9] missing [0] single [1] married [2] living together [3] windowed [4] divorced [5] separated [1] Muslim [2] Christian [3] Protestant [4] religion [5] [0] [1] yes [0] [1] yes [0] [1] yes [96] don’t know [99] missing [0] [1] yes [9] missing","code":"look_for(women, \"id\", details = \"none\") ##  pos variable          label                    ##   1  id_woman          Woman Id                 ##   2  id_household      Household Id             ##   7  residency         Urban / rural residency  ##  16  ideal_nb_children Ideal number of children look_for(women, details = \"full\") ##  pos variable          label              col_type missing unique_values ##  1   id_woman          Woman Id           dbl      0       2000          ##  2   id_household      Household Id       dbl      0       1814          ##  3   weight            Sample weight      dbl      0       351           ##  4   interview_date    Interview date     date     0       165           ##  5   date_of_birth     Date of birth      date     0       1740          ##  6   age               Age at last anniv~ dbl      0       36            ##  7   residency         Urban / rural res~ dbl+lbl  0       2             ##                                                                          ##  8   region            Region             dbl+lbl  0       4             ##                                                                          ##                                                                          ##                                                                          ##  9   instruction       Level of instruct~ dbl+lbl  0       4             ##                                                                          ##                                                                          ##                                                                          ##  10  employed          Employed?          dbl+lbl  7       3             ##                                                                          ##                                                                          ##  11  matri             Matrimonial status dbl+lbl  0       6             ##                                                                          ##                                                                          ##                                                                          ##                                                                          ##                                                                          ##  12  religion          Religion           dbl+lbl  4       6             ##                                                                          ##                                                                          ##                                                                          ##                                                                          ##  13  newspaper         Read newspaper?    dbl+lbl  0       2             ##                                                                          ##  14  radio             Listen to radio?   dbl+lbl  0       2             ##                                                                          ##  15  tv                Watch TV?          dbl+lbl  0       2             ##                                                                          ##  16  ideal_nb_children Ideal number of c~ dbl+lbl  0       18            ##                                                                          ##  17  test              Ever tested for H~ dbl+lbl  29      3             ##                                                                          ##                                                                          ##  values             na_values na_range ##  range: 1 - 2000                       ##  range: 1 - 1814                       ##  range: 0.044629 -~                    ##  range: 2011-12-01~                    ##  range: 1962-02-07~                    ##  range: 14 - 49                        ##  [1] urban                             ##  [2] rural                             ##  [1] North                             ##  [2] East                              ##  [3] South                             ##  [4] West                              ##  [0] none                              ##  [1] primary                           ##  [2] secondary                         ##  [3] higher                            ##  [0] no             9                  ##  [1] yes                               ##  [9] missing                           ##  [0] single                            ##  [1] married                           ##  [2] living togeth~                    ##  [3] windowed                          ##  [4] divorced                          ##  [5] separated                         ##  [1] Muslim                            ##  [2] Christian                         ##  [3] Protestant                        ##  [4] no religion                       ##  [5] other                             ##  [0] no                                ##  [1] yes                               ##  [0] no                                ##  [1] yes                               ##  [0] no                                ##  [1] yes                               ##  [96] don't know                       ##  [99] missing                          ##  [0] no             9                  ##  [1] yes                               ##  [9] missing look_for(women, details = \"full\") %>%   dplyr::glimpse() ## Rows: 17 ## Columns: 14 ## $ pos           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ## $ variable      <chr> \"id_woman\", \"id_household\", \"weight\", \"interview_date\", … ## $ label         <chr> \"Woman Id\", \"Household Id\", \"Sample weight\", \"Interview … ## $ col_type      <chr> \"dbl\", \"dbl\", \"dbl\", \"date\", \"date\", \"dbl\", \"dbl+lbl\", \"… ## $ missing       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 29 ## $ levels        <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, … ## $ value_labels  <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <1, 2>, … ## $ class         <named list> \"numeric\", \"numeric\", \"numeric\", \"Date\", \"Date\", … ## $ type          <chr> \"double\", \"double\", \"double\", \"double\", \"double\",… ## $ na_values     <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <… ## $ na_range      <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, … ## $ n_na          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 29 ## $ unique_values <int> 2000, 1814, 351, 165, 1740, 36, 2, 4, 4, 3, 6, 6,… ## $ range         <named list> <1, 2000>, <1, 1814>, <0.044629, 4.396831>, <2011… look_for(women, details = \"full\") %>% to_gt()"},{"path":"https://larmarange.github.io/labelled/dev/articles/look_for.html","id":"advanced-usages-of-look_for","dir":"Articles","previous_headings":"","what":"Advanced usages of look_for()","title":"Generate a data dictionary and search for variables with `look_for()`","text":"look_for() returns detailed tibble summarized printing. deactivate default printing see full results, simply use dplyr::as_tibble(), dplyr::glimpse() even utils::View(). tibble returned look_for() easily manipulated advanced programming. column several values one variable (e.g. levels value_labels), results stored nested named list. can convert named lists simpler character vectors, can use convert_list_columns_to_character(). Alternatively, can use lookfor_to_long_format() transform results long format one row per factor level per value label. can combined:","code":"look_for(women) %>% View() look_for(women) %>% as_tibble() ## # A tibble: 17 × 7 ##      pos variable          label            col_type missing levels value_labels ##    <int> <chr>             <chr>            <chr>      <int> <name> <named list> ##  1     1 id_woman          Woman Id         dbl            0 <NULL> <NULL>       ##  2     2 id_household      Household Id     dbl            0 <NULL> <NULL>       ##  3     3 weight            Sample weight    dbl            0 <NULL> <NULL>       ##  4     4 interview_date    Interview date   date           0 <NULL> <NULL>       ##  5     5 date_of_birth     Date of birth    date           0 <NULL> <NULL>       ##  6     6 age               Age at last ann… dbl            0 <NULL> <NULL>       ##  7     7 residency         Urban / rural r… dbl+lbl        0 <NULL> <dbl [2]>    ##  8     8 region            Region           dbl+lbl        0 <NULL> <dbl [4]>    ##  9     9 instruction       Level of instru… dbl+lbl        0 <NULL> <dbl [4]>    ## 10    10 employed          Employed?        dbl+lbl        7 <NULL> <dbl [3]>    ## 11    11 matri             Matrimonial sta… dbl+lbl        0 <NULL> <dbl [6]>    ## 12    12 religion          Religion         dbl+lbl        4 <NULL> <dbl [5]>    ## 13    13 newspaper         Read newspaper?  dbl+lbl        0 <NULL> <dbl [2]>    ## 14    14 radio             Listen to radio? dbl+lbl        0 <NULL> <dbl [2]>    ## 15    15 tv                Watch TV?        dbl+lbl        0 <NULL> <dbl [2]>    ## 16    16 ideal_nb_children Ideal number of… dbl+lbl        0 <NULL> <dbl [2]>    ## 17    17 test              Ever tested for… dbl+lbl       29 <NULL> <dbl [3]> glimpse(look_for(women)) ## Rows: 17 ## Columns: 7 ## $ pos          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ## $ variable     <chr> \"id_woman\", \"id_household\", \"weight\", \"interview_date\", \"… ## $ label        <chr> \"Woman Id\", \"Household Id\", \"Sample weight\", \"Interview d… ## $ col_type     <chr> \"dbl\", \"dbl\", \"dbl\", \"date\", \"date\", \"dbl\", \"dbl+lbl\", \"d… ## $ missing      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 29 ## $ levels       <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <… ## $ value_labels <named list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <1, 2>, <… look_for(women) %>% convert_list_columns_to_character() ## # A tibble: 17 × 7 ##      pos variable          label            col_type missing levels value_labels ##    <int> <chr>             <chr>            <chr>      <int> <chr>  <chr>        ##  1     1 id_woman          Woman Id         dbl            0 \"\"     \"\"           ##  2     2 id_household      Household Id     dbl            0 \"\"     \"\"           ##  3     3 weight            Sample weight    dbl            0 \"\"     \"\"           ##  4     4 interview_date    Interview date   date           0 \"\"     \"\"           ##  5     5 date_of_birth     Date of birth    date           0 \"\"     \"\"           ##  6     6 age               Age at last ann… dbl            0 \"\"     \"\"           ##  7     7 residency         Urban / rural r… dbl+lbl        0 \"\"     \"[1] urban;… ##  8     8 region            Region           dbl+lbl        0 \"\"     \"[1] North;… ##  9     9 instruction       Level of instru… dbl+lbl        0 \"\"     \"[0] none; … ## 10    10 employed          Employed?        dbl+lbl        7 \"\"     \"[0] no; [1… ## 11    11 matri             Matrimonial sta… dbl+lbl        0 \"\"     \"[0] single… ## 12    12 religion          Religion         dbl+lbl        4 \"\"     \"[1] Muslim… ## 13    13 newspaper         Read newspaper?  dbl+lbl        0 \"\"     \"[0] no; [1… ## 14    14 radio             Listen to radio? dbl+lbl        0 \"\"     \"[0] no; [1… ## 15    15 tv                Watch TV?        dbl+lbl        0 \"\"     \"[0] no; [1… ## 16    16 ideal_nb_children Ideal number of… dbl+lbl        0 \"\"     \"[96] don't… ## 17    17 test              Ever tested for… dbl+lbl       29 \"\"     \"[0] no; [1… look_for(women) %>% lookfor_to_long_format() ## # A tibble: 41 × 7 ##      pos variable       label               col_type missing levels value_labels ##    <int> <chr>          <chr>               <chr>      <int> <chr>  <chr>        ##  1     1 id_woman       Woman Id            dbl            0 NA     NA           ##  2     2 id_household   Household Id        dbl            0 NA     NA           ##  3     3 weight         Sample weight       dbl            0 NA     NA           ##  4     4 interview_date Interview date      date           0 NA     NA           ##  5     5 date_of_birth  Date of birth       date           0 NA     NA           ##  6     6 age            Age at last annive… dbl            0 NA     NA           ##  7     7 residency      Urban / rural resi… dbl+lbl        0 NA     [1] urban    ##  8     7 residency      Urban / rural resi… dbl+lbl        0 NA     [2] rural    ##  9     8 region         Region              dbl+lbl        0 NA     [1] North    ## 10     8 region         Region              dbl+lbl        0 NA     [2] East     ## # ℹ 31 more rows look_for(women) %>%   lookfor_to_long_format() %>%   convert_list_columns_to_character() ## # A tibble: 41 × 7 ##      pos variable       label               col_type missing levels value_labels ##    <int> <chr>          <chr>               <chr>      <int> <chr>  <chr>        ##  1     1 id_woman       Woman Id            dbl            0 NA     NA           ##  2     2 id_household   Household Id        dbl            0 NA     NA           ##  3     3 weight         Sample weight       dbl            0 NA     NA           ##  4     4 interview_date Interview date      date           0 NA     NA           ##  5     5 date_of_birth  Date of birth       date           0 NA     NA           ##  6     6 age            Age at last annive… dbl            0 NA     NA           ##  7     7 residency      Urban / rural resi… dbl+lbl        0 NA     [1] urban    ##  8     7 residency      Urban / rural resi… dbl+lbl        0 NA     [2] rural    ##  9     8 region         Region              dbl+lbl        0 NA     [1] North    ## 10     8 region         Region              dbl+lbl        0 NA     [2] East     ## # ℹ 31 more rows"},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"creation-and-tests","dir":"Articles","previous_headings":"Tagged NAs","what":"Creation and tests","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"Tagged NAs proper NA values tag attached . can created tagged_na(). attached tag single letter, lowercase (-z) uppercase (-Z). R functions, tagged NAs just considered regular NAs. default, just printed regular NA. show/print tags, need use na_tag(), print_tagged_na() format_tagged_na(). test certain NA regular NA tagged NA, use is_regular_na() is_tagged_na(). Tagged NAs defined double vectors. add tagged NA character vector, converted regular NA. add tagged NA integer vector, vector converted double vector.","code":"x <- c(1:5, tagged_na(\"a\"), tagged_na(\"z\"), NA) x ## [1]  1  2  3  4  5 NA NA NA is.na(x) ## [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE na_tag(x) ## [1] NA  NA  NA  NA  NA  \"a\" \"z\" NA print_tagged_na(x) ## [1]     1     2     3     4     5 NA(a) NA(z)    NA format_tagged_na(x) ## [1] \"    1\" \"    2\" \"    3\" \"    4\" \"    5\" \"NA(a)\" \"NA(z)\" \"   NA\" is.na(x) ## [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE is_tagged_na(x) ## [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE # You can test for specific tagged NAs with the second argument is_tagged_na(x, \"a\") ## [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE is_regular_na(x) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE y <- c(\"a\", \"b\", tagged_na(\"z\")) y ## [1] \"a\" \"b\" NA is_tagged_na(y) ## [1] FALSE FALSE FALSE format_tagged_na(y) ## Error: `x` must be a double vector z <- c(1L, 2L, tagged_na(\"a\")) typeof(z) ## [1] \"double\" format_tagged_na(z) ## [1] \"    1\" \"    2\" \"NA(a)\""},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"unique-values-duplicates-and-sorting-with-tagged-nas","dir":"Articles","previous_headings":"Tagged NAs","what":"Unique values, duplicates and sorting with tagged NAs","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"default, functions base::unique(), base::duplicated(), base::order() base::sort() treat tagged NAs thing regular NA. can use unique_tagged_na(), duplicated_tagged_na(), order_tagged_na() sort_tagged_na() alternatives treat two tagged NAs different tags separate values.","code":"x <- c(1, 2, tagged_na(\"a\"), 1, tagged_na(\"z\"), 2, tagged_na(\"a\"), NA) x %>% print_tagged_na() ## [1]     1     2 NA(a)     1 NA(z)     2 NA(a)    NA unique(x) %>% print_tagged_na() ## [1]     1     2 NA(a) unique_tagged_na(x) %>% print_tagged_na() ## [1]     1     2 NA(a) NA(z)    NA duplicated(x) ## [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE duplicated_tagged_na(x) ## [1] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE sort(x, na.last = TRUE) %>% print_tagged_na() ## [1]     1     1     2     2 NA(a) NA(z) NA(a)    NA sort_tagged_na(x) %>% print_tagged_na() ## [1]     1     1     2     2 NA(a) NA(a) NA(z)    NA"},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"tagged-nas-and-value-labels","dir":"Articles","previous_headings":"Tagged NAs","what":"Tagged NAs and value labels","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"possible define value labels tagged NAs. converting labelled vector factor, tagged NAs , default, converted regular NAs (possible define tagged NAs factors). However, option explicit_tagged_na to_factor() allows transform tagged NAs explicit factor levels.","code":"x <- c(1, 0, 1, tagged_na(\"r\"), 0, tagged_na(\"d\"), tagged_na(\"z\"), NA) val_labels(x) <- c(   no = 0, yes = 1,   \"don't know\" = tagged_na(\"d\"),   refusal = tagged_na(\"r\") ) x ## <labelled<double>[8]> ## [1]     1     0     1 NA(r)     0 NA(d) NA(z)    NA ##  ## Labels: ##  value      label ##      0         no ##      1        yes ##  NA(d) don't know ##  NA(r)    refusal to_factor(x) ## [1] yes  no   yes  <NA> no   <NA> <NA> <NA> ## Levels: no yes to_factor(x, explicit_tagged_na = TRUE) ## [1] yes        no         yes        refusal    no         don't know NA(z)      ## [8] <NA>       ## Levels: no yes don't know refusal NA(z) to_factor(x, levels = \"prefixed\", explicit_tagged_na = TRUE) ## [1] [1] yes            [0] no             [1] yes            [NA(r)] refusal    ## [5] [0] no             [NA(d)] don't know [NA(z)] NA(z)      <NA>               ## Levels: [0] no [1] yes [NA(d)] don't know [NA(r)] refusal [NA(z)] NA(z)"},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"conversion-into-user-nas","dir":"Articles","previous_headings":"Tagged NAs","what":"Conversion into user NAs","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"Tagged NAs can converted user NAs tagged_na_to_user_na(). Use tagged_na_to_regular_na() convert tagged NAs regular NAs.","code":"tagged_na_to_user_na(x) ## <labelled_spss<double>[8]> ## [1]  1  0  1  3  0  2  4 NA ## Missing range:  [2, 4] ##  ## Labels: ##  value      label ##      0         no ##      1        yes ##      2 don't know ##      3    refusal ##      4      NA(z) tagged_na_to_user_na(x, user_na_start = 10) ## <labelled_spss<double>[8]> ## [1]  1  0  1 11  0 10 12 NA ## Missing range:  [10, 12] ##  ## Labels: ##  value      label ##      0         no ##      1        yes ##     10 don't know ##     11    refusal ##     12      NA(z) tagged_na_to_regular_na(x) ## <labelled<double>[8]> ## [1]  1  0  1 NA  0 NA NA NA ##  ## Labels: ##  value label ##      0    no ##      1   yes tagged_na_to_regular_na(x) %>% is_tagged_na() ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"user-nas","dir":"Articles","previous_headings":"","what":"User NAs","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"haven introduced haven_labelled_spss class deal user defined missing values similar way SPSS. case, additional attributes used indicate values considered missing, values stored internal NA values. note R function take information account. Therefore, convert missing values NA required analysis. defined missing values co-exist internal NA values.","code":""},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"creation","dir":"Articles","previous_headings":"User NAs","what":"Creation","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"User NAs created directly labelled_spss(). can also manipulate na_values() na_range(). NB: cant also use set_na_range() set_na_values() dplyr-like syntax.","code":"v <- labelled(c(1, 2, 3, 9, 1, 3, 2, NA), c(yes = 1, no = 3, \"don't know\" = 9)) v ## <labelled<double>[8]> ## [1]  1  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know na_values(v) <- 9 v ## <labelled_spss<double>[8]> ## [1]  1  2  3  9  1  3  2 NA ## Missing values: 9 ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know na_values(v) <- NULL v ## <labelled<double>[8]> ## [1]  1  2  3  9  1  3  2 NA ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know na_range(v) <- c(5, Inf) na_range(v) ## [1]   5 Inf v ## <labelled_spss<double>[8]> ## [1]  1  2  3  9  1  3  2 NA ## Missing range:  [5, Inf] ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union # setting value labels and user NAs df <- tibble(s1 = c(\"M\", \"M\", \"F\", \"F\"), s2 = c(1, 1, 2, 9)) %>%   set_value_labels(s2 = c(yes = 1, no = 2)) %>%   set_na_values(s2 = 9) df$s2 ## <labelled_spss<double>[4]> ## [1] 1 1 2 9 ## Missing values: 9 ##  ## Labels: ##  value label ##      1   yes ##      2    no # removing user NAs df <- df %>% set_na_values(s2 = NULL) df$s2 ## <labelled<double>[4]> ## [1] 1 1 2 9 ##  ## Labels: ##  value label ##      1   yes ##      2    no"},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"tests","dir":"Articles","previous_headings":"User NAs","what":"Tests","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"Note .na() return TRUE user NAs. Use is_user_na() test specific value user NA is_regular_na() test regular NA.","code":"v ## <labelled_spss<double>[8]> ## [1]  1  2  3  9  1  3  2 NA ## Missing range:  [5, Inf] ##  ## Labels: ##  value      label ##      1        yes ##      3         no ##      9 don't know is.na(v) ## [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE is_user_na(v) ## [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE is_regular_na(v) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE"},{"path":"https://larmarange.github.io/labelled/dev/articles/missing_values.html","id":"conversion","dir":"Articles","previous_headings":"User NAs","what":"Conversion","title":"About missing values: regular NAs, tagged NAs and user NAs","text":"R functions, user NAs values still regular values. can convert user NAs regular NAs user_na_to_na() user_na_to_regular_na() (functions identical). Alternatively, vector numeric, can convert user NAs tagged NAs user_na_to_tagged_na(). Finally, can also remove user NAs definition without converting values NA, using remove_user_na().","code":"x <- c(1:5, 11:15) na_range(x) <- c(10, Inf) val_labels(x) <- c(\"dk\" = 11, \"refused\" = 15) x ## <labelled_spss<integer>[10]> ##  [1]  1  2  3  4  5 11 12 13 14 15 ## Missing range:  [10, Inf] ##  ## Labels: ##  value   label ##     11      dk ##     15 refused mean(x) ## [1] 8 user_na_to_na(x) ## <labelled<integer>[10]> ##  [1]  1  2  3  4  5 NA NA NA NA NA mean(user_na_to_na(x), na.rm = TRUE) ## [1] 3 user_na_to_tagged_na(x) ## ℹ `x` has been converted into a double vector. ## <labelled<double>[10]> ##  [1]     1     2     3     4     5 NA(a) NA(b) NA(c) NA(d) NA(e) ##  ## Labels: ##  value   label ##  NA(a)      dk ##  NA(e) refused mean(user_na_to_tagged_na(x), na.rm = TRUE) ## ℹ `x` has been converted into a double vector. ## [1] 3 remove_user_na(x) ## <labelled<integer>[10]> ##  [1]  1  2  3  4  5 11 12 13 14 15 ##  ## Labels: ##  value   label ##     11      dk ##     15 refused mean(remove_user_na(x)) ## [1] 8"},{"path":"https://larmarange.github.io/labelled/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Larmarange. Author, maintainer. Daniel Ludecke. Contributor. Hadley Wickham. Contributor. Michal Bojanowski. Contributor. François Briatte. Contributor.","code":""},{"path":"https://larmarange.github.io/labelled/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larmarange J (2025). labelled: Manipulating Labelled Data. R package version 2.16.0.9000, https://larmarange.github.io/labelled/.","code":"@Manual{,   title = {labelled: Manipulating Labelled Data},   author = {Joseph Larmarange},   year = {2025},   note = {R package version 2.16.0.9000},   url = {https://larmarange.github.io/labelled/}, }"},{"path":"https://larmarange.github.io/labelled/dev/index.html","id":"labelled-","dir":"","previous_headings":"","what":"Manipulating Labelled Data","title":"Manipulating Labelled Data","text":"package built new classes haven_labelled haven_labelled_spss introduced haven package handle labelled variables imported SPSS, Stata SAS. labelled package propose several functions manipulate vectors metadata: variable labels, value labels user-defined missing values.","code":""},{"path":"https://larmarange.github.io/labelled/dev/index.html","id":"installation--documentation","dir":"","previous_headings":"","what":"Installation & Documentation","title":"Manipulating Labelled Data","text":"install stable version: Documentation stable version: https://larmarange.github.io/labelled/ install development version: Documentation development version: https://larmarange.github.io/labelled/dev/","code":"install.packages(\"labelled\") remotes::install_github(\"larmarange/labelled\")"},{"path":"https://larmarange.github.io/labelled/dev/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Manipulating Labelled Data","text":"Read vignette https://larmarange.github.io/labelled/articles/intro_labelled.html","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/index.html","id":"some-general-guidelines","dir":"","previous_headings":"","what":"Some general guidelines","title":"Manipulating Labelled Data","text":"Functions intended support labelled metadata structures . However, to_labelled() method allows convert metadata foreign memisc packages. Functions , default, modify metadata (.e. classes attributes), except explicitly expressed user.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/copy_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy variable and value labels and SPSS-style missing value — copy_labels","title":"Copy variable and value labels and SPSS-style missing value — copy_labels","text":"function copies variable value labels (including missing values) one vector another one data frame another data frame. data frame, labels copied according variable names, variables type data frames.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/copy_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy variable and value labels and SPSS-style missing value — copy_labels","text":"","code":"copy_labels(from, to, .strict = TRUE)  copy_labels_from(to, from, .strict = TRUE)"},{"path":"https://larmarange.github.io/labelled/dev/reference/copy_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy variable and value labels and SPSS-style missing value — copy_labels","text":"vector data.frame (survey design) copy labels . vector data.frame (survey design) copy labels . .strict labelled vector, type (numeric character) order copy value labels SPSS-style missing values. case .strict = TRUE, error produced. .strict = FALSE, variable label copied.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/copy_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy variable and value labels and SPSS-style missing value — copy_labels","text":"base R functions like base::subset() drop variable value labels attached variable. copy_labels used restore attributes. copy_labels_from intended used dplyr syntax, see examples.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/copy_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy variable and value labels and SPSS-style missing value — copy_labels","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union df <- tibble(   id = 1:3,   happy = factor(c(\"yes\", \"no\", \"yes\")),   gender = labelled(c(1, 1, 2), c(female = 1, male = 2)) ) %>%   set_variable_labels(     id = \"Individual ID\",     happy = \"Are you happy?\",     gender = \"Gender of respondent\"   ) var_label(df) #> $id #> [1] \"Individual ID\" #>  #> $happy #> [1] \"Are you happy?\" #>  #> $gender #> [1] \"Gender of respondent\" #>  fdf <- df %>% filter(id < 3) var_label(fdf) # some variable labels have been lost #> $id #> [1] \"Individual ID\" #>  #> $happy #> [1] \"Are you happy?\" #>  #> $gender #> [1] \"Gender of respondent\" #>  fdf <- fdf %>% copy_labels_from(df) var_label(fdf) #> $id #> [1] \"Individual ID\" #>  #> $happy #> [1] \"Are you happy?\" #>  #> $gender #> [1] \"Gender of respondent\" #>   # Alternative syntax fdf <- subset(df, id < 3) fdf <- copy_labels(from = df, to = fdf)"},{"path":"https://larmarange.github.io/labelled/dev/reference/dictionary_to_variable_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","title":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","text":"helpers used generate, data frame corresponding variable dictionary, list variable value labels passed set_variable_labels() set_value_labels().","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/dictionary_to_variable_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","text":"","code":"dictionary_to_variable_labels(dictionary, names_from = 1, labels_from = 2)  dictionary_to_value_labels(   dictionary,   names_from = 1,   values_from = 2,   labels_from = 3,   delim_entries = NULL,   delim_value_label = NULL,   data = NULL )"},{"path":"https://larmarange.github.io/labelled/dev/reference/dictionary_to_variable_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","text":"dictionary data frame tibble containing definitions variable / value labels. names_from <tidy-select> Column containing names variables. labels_from <tidy-select> Column containing labels (unused delim_value_label provided). values_from <tidy-select> Column containing values pairs values labels (see examples). delim_entries Optional string giving delimiter several pairs value labels provided unique row. NULL pair defined separate row (see examples). delim_value_label Optional string giving delimiter value label. data data frame tibble containing raw data identify type (integer, numeric, character) variable.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/dictionary_to_variable_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","text":"noted value labels ","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/dictionary_to_variable_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a dictionary data frame into a list of variable / value labels — dictionary_to_variable_labels","text":"","code":"dic <- dplyr::tibble(   variable = c(\"mpg\", \"vs\", \"am\", \"cyl\"),   label = c(\"miles / gallon\", \"Engine\", \"Transmission\", NA),   values = c(NA, \"0:V-Shaped,1:straight\", \"0:automatic,1:manual\", NA) ) dic #> # A tibble: 4 × 3 #>   variable label          values                #>   <chr>    <chr>          <chr>                 #> 1 mpg      miles / gallon NA                    #> 2 vs       Engine         0:V-Shaped,1:straight #> 3 am       Transmission   0:automatic,1:manual  #> 4 cyl      NA             NA                     l <- dic %>% dictionary_to_variable_labels() l #> $mpg #> [1] \"miles / gallon\" #>  #> $vs #> [1] \"Engine\" #>  #> $am #> [1] \"Transmission\" #>  #> $cyl #> [1] NA #>  mtcars %>%   set_variable_labels(.labels = l) %>%   look_for() #>  pos variable label          col_type missing values #>  1   mpg      miles / gallon dbl      0              #>  2   cyl      —              dbl      0              #>  3   disp     —              dbl      0              #>  4   hp       —              dbl      0              #>  5   drat     —              dbl      0              #>  6   wt       —              dbl      0              #>  7   qsec     —              dbl      0              #>  8   vs       Engine         dbl      0              #>  9   am       Transmission   dbl      0              #>  10  gear     —              dbl      0              #>  11  carb     —              dbl      0               vl <- dic %>%   dictionary_to_value_labels(     values_from = values,     delim_entries = \",\",     delim_value_label = \":\",     data = mtcars   ) mtcars %>%   set_value_labels(.labels = vl) %>%   look_for() #>  pos variable label col_type missing values        #>  1   mpg      —     dbl      0                     #>  2   cyl      —     dbl      0                     #>  3   disp     —     dbl      0                     #>  4   hp       —     dbl      0                     #>  5   drat     —     dbl      0                     #>  6   wt       —     dbl      0                     #>  7   qsec     —     dbl      0                     #>  8   vs       —     dbl+lbl  0       [0] V-Shaped  #>                                      [1] straight  #>  9   am       —     dbl+lbl  0       [0] automatic #>                                      [1] manual    #>  10  gear     —     dbl      0                     #>  11  carb     —     dbl      0                      dic2 <- dplyr::tibble(   variable = c(\"am\", \"am\", \"vs\", \"vs\"),   labels = c(\"0:automatic\", \"1:manual\", \"0:V-shaped\", \"1:straight\") ) dic2 %>%   dictionary_to_value_labels(     delim_value_label = \":\",     data = mtcars   ) #> $am #> automatic    manual  #>         0         1  #>  #> $vs #> V-shaped straight  #>        0        1  #>   dic3 <- dplyr::tibble(   code = c(0, 1, 0, 1),   label = c(\"automatic\", \"manual\", \"V-shaped\", \"straight\"),   var = c(\"am\", \"am\", \"vs\", \"vs\") ) dic3 %>%   dictionary_to_value_labels(     names_from = var,     values_from = code,     labels_from = label,     data = mtcars   ) #> $am #> automatic    manual  #>         0         1  #>  #> $vs #> V-shaped straight  #>        0        1  #>"},{"path":"https://larmarange.github.io/labelled/dev/reference/drop_unused_value_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop unused value labels — drop_unused_value_labels","title":"Drop unused value labels — drop_unused_value_labels","text":"Drop value labels associated value present data.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/drop_unused_value_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop unused value labels — drop_unused_value_labels","text":"","code":"drop_unused_value_labels(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/drop_unused_value_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop unused value labels — drop_unused_value_labels","text":"x vector, data frame survey design.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/drop_unused_value_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop unused value labels — drop_unused_value_labels","text":"","code":"x <- labelled(c(1, 2, 2, 1), c(yes = 1, no = 2, maybe = 3)) x #> <labelled<double>[4]> #> [1] 1 2 2 1 #>  #> Labels: #>  value label #>      1   yes #>      2    no #>      3 maybe drop_unused_value_labels(x) #> <labelled<double>[4]> #> [1] 1 2 2 1 #>  #> Labels: #>  value label #>      1   yes #>      2    no"},{"path":"https://larmarange.github.io/labelled/dev/reference/is_prefixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a factor is prefixed — is_prefixed","title":"Check if a factor is prefixed — is_prefixed","text":"Check factor prefixed","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/is_prefixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a factor is prefixed — is_prefixed","text":"","code":"is_prefixed(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/is_prefixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a factor is prefixed — is_prefixed","text":"x factor","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":null,"dir":"Reference","previous_headings":"","what":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"look_for() emulates lookfor Stata command R. supports searching variable names regular R data frames well variable labels descriptions, factor levels value labels. command meant help users finding variables large datasets.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"","code":"look_for(   data,   ...,   labels = TRUE,   values = TRUE,   ignore.case = TRUE,   details = c(\"basic\", \"none\", \"full\") )  lookfor(   data,   ...,   labels = TRUE,   values = TRUE,   ignore.case = TRUE,   details = c(\"basic\", \"none\", \"full\") )  generate_dictionary(   data,   ...,   labels = TRUE,   values = TRUE,   ignore.case = TRUE,   details = c(\"basic\", \"none\", \"full\") )  # S3 method for class 'look_for' print(x, ...)  look_for_and_select(   data,   ...,   labels = TRUE,   values = TRUE,   ignore.case = TRUE )  convert_list_columns_to_character(x, sep_value_labels = \"[]\", sep_other = \"; \")  lookfor_to_long_format(x, sep_value_labels = \"[]\")  to_gt(   x,   column_labels = list(pos = \"#\", variable = \"Variable\", col_type = \"Type\", label =     \"Variable label\", values = \"Values\", missing = \"Missing values\", unique_values =     \"Unique values\", na_values = \"User-defined missings (values)\", na_range =     \"User-defined missings (range)\") )"},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"Inspired lookfor command Stata.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"data data frame survey object ... optional list keywords, character string (several character strings), can formatted regular expression suitable base::grep() pattern, vector keywords; displays variables specified labels whether search variable labels (descriptions); TRUE default values whether search within values (factor levels value labels); TRUE default ignore.case whether make keywords case sensitive; TRUE default (case ignored matching) details add details variable (full details time consuming big data frames, FALSE equivalent \"none\" TRUE \"full\") x tibble returned look_for() sep_value_labels (string) value labels, separator value name sep_other separator list columns column_labels Optional column labels","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"tibble data frame featuring variable position, name description (exists) original data frame","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"keyword provided, produce data dictionary overall data frame. function looks variable names matches keywords. available, variable labels included search scope. Variable labels data.frame imported foreign memisc packages also taken account (see to_labelled()). keyword provided, return variables data. look_for(), lookfor() generate_dictionary() equivalent. default, results summarized printing. deactivate default printing, use dplyr::as_tibble(). lookfor_to_long_format() used transform results one row per factor level per value label. Use convert_list_columns_to_character() convert named list columns character vectors (see examples). function to_gt() transform results look_for() nicely formatted table using gt::gt(). table easily exported file gt::gtsave(). gt::tab_header() used add title table (see examples). look_for_and_select() shortcut selecting variables applying dplyr::select()s return data frame selected variables.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"François Briatte f.briatte@gmail.com, Joseph Larmarange joseph@larmarange.net","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/look_for.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look for keywords variable names and descriptions / Create a data dictionary — look_for","text":"setosa versicolor virginica [1] north [2] south [3] center [9] missing [f] female [m] male","code":"look_for(iris) #>  pos variable     label col_type missing values     #>  1   Sepal.Length —     dbl      0                  #>  2   Sepal.Width  —     dbl      0                  #>  3   Petal.Length —     dbl      0                  #>  4   Petal.Width  —     dbl      0                  #>  5   Species      —     fct      0       setosa     #>                                          versicolor #>                                          virginica   # Look for a single keyword. look_for(iris, \"petal\") #>  pos variable     label col_type missing values #>  3   Petal.Length —     dbl      0              #>  4   Petal.Width  —     dbl      0              look_for(iris, \"s\") #>  pos variable     label col_type missing values     #>  1   Sepal.Length —     dbl      0                  #>  2   Sepal.Width  —     dbl      0                  #>  5   Species      —     fct      0       setosa     #>                                          versicolor #>                                          virginica  iris %>%   look_for_and_select(\"s\") %>%   head() #>   Sepal.Length Sepal.Width Species #> 1          5.1         3.5  setosa #> 2          4.9         3.0  setosa #> 3          4.7         3.2  setosa #> 4          4.6         3.1  setosa #> 5          5.0         3.6  setosa #> 6          5.4         3.9  setosa  # Look for with a regular expression look_for(iris, \"petal|species\") #>  pos variable     label col_type missing values     #>  3   Petal.Length —     dbl      0                  #>  4   Petal.Width  —     dbl      0                  #>  5   Species      —     fct      0       setosa     #>                                          versicolor #>                                          virginica  look_for(iris, \"s$\") #>  pos variable label col_type missing values     #>  5   Species  —     fct      0       setosa     #>                                      versicolor #>                                      virginica   # Look for with several keywords look_for(iris, \"pet\", \"sp\") #>  pos variable     label col_type missing values     #>  3   Petal.Length —     dbl      0                  #>  4   Petal.Width  —     dbl      0                  #>  5   Species      —     fct      0       setosa     #>                                          versicolor #>                                          virginica  look_for(iris, \"pet\", \"sp\", \"width\") #>  pos variable     label col_type missing values     #>  2   Sepal.Width  —     dbl      0                  #>  3   Petal.Length —     dbl      0                  #>  4   Petal.Width  —     dbl      0                  #>  5   Species      —     fct      0       setosa     #>                                          versicolor #>                                          virginica  look_for(iris, \"Pet\", \"sp\", \"width\", ignore.case = FALSE) #>  pos variable     label col_type missing values #>  3   Petal.Length —     dbl      0              #>  4   Petal.Width  —     dbl      0               # Look_for can search within factor levels or value labels look_for(iris, \"vers\") #>  pos variable label col_type missing values     #>  5   Species  —     fct      0       setosa     #>                                      versicolor #>                                      virginica   # Quicker search without variable details look_for(iris, details = \"none\") #>  pos variable     label #>  1   Sepal.Length —     #>  2   Sepal.Width  —     #>  3   Petal.Length —     #>  4   Petal.Width  —     #>  5   Species      —      # To obtain more details about each variable look_for(iris, details = \"full\") #>  pos variable     label col_type missing unique_values values           #>  1   Sepal.Length —     dbl      0       35            range: 4.3 - 7.9 #>  2   Sepal.Width  —     dbl      0       23            range: 2 - 4.4   #>  3   Petal.Length —     dbl      0       43            range: 1 - 6.9   #>  4   Petal.Width  —     dbl      0       22            range: 0.1 - 2.5 #>  5   Species      —     fct      0       3             setosa           #>                                                        versicolor       #>                                                        virginica        #>  na_values na_range #>                     #>                     #>                     #>                     #>                     #>                     #>                      # To deactivate default printing, convert to tibble look_for(iris, details = \"full\") %>%   dplyr::as_tibble() #> # A tibble: 5 × 14 #>     pos variable     label col_type missing levels      value_labels class type  #>   <int> <chr>        <chr> <chr>      <int> <named lis> <named list> <nam> <chr> #> 1     1 Sepal.Length NA    dbl            0 <NULL>      <NULL>       <chr> doub… #> 2     2 Sepal.Width  NA    dbl            0 <NULL>      <NULL>       <chr> doub… #> 3     3 Petal.Length NA    dbl            0 <NULL>      <NULL>       <chr> doub… #> 4     4 Petal.Width  NA    dbl            0 <NULL>      <NULL>       <chr> doub… #> 5     5 Species      NA    fct            0 <chr [3]>   <NULL>       <chr> inte… #> # ℹ 5 more variables: na_values <named list>, na_range <named list>, #> #   n_na <int>, unique_values <int>, range <named list>  # To convert named lists into character vectors look_for(iris) %>% convert_list_columns_to_character() #> # A tibble: 5 × 7 #>     pos variable     label col_type missing levels                  value_labels #>   <int> <chr>        <chr> <chr>      <int> <chr>                   <chr>        #> 1     1 Sepal.Length NA    dbl            0 \"\"                      \"\"           #> 2     2 Sepal.Width  NA    dbl            0 \"\"                      \"\"           #> 3     3 Petal.Length NA    dbl            0 \"\"                      \"\"           #> 4     4 Petal.Width  NA    dbl            0 \"\"                      \"\"           #> 5     5 Species      NA    fct            0 \"setosa; versicolor; v… \"\"            # Long format with one row per factor and per value label look_for(iris) %>% lookfor_to_long_format() #> # A tibble: 7 × 7 #>     pos variable     label col_type missing levels     value_labels #>   <int> <chr>        <chr> <chr>      <int> <chr>      <chr>        #> 1     1 Sepal.Length NA    dbl            0 NA         NA           #> 2     2 Sepal.Width  NA    dbl            0 NA         NA           #> 3     3 Petal.Length NA    dbl            0 NA         NA           #> 4     4 Petal.Width  NA    dbl            0 NA         NA           #> 5     5 Species      NA    fct            0 setosa     NA           #> 6     5 Species      NA    fct            0 versicolor NA           #> 7     5 Species      NA    fct            0 virginica  NA            # Both functions can be combined look_for(iris) %>%   lookfor_to_long_format() %>%   convert_list_columns_to_character() #> # A tibble: 7 × 7 #>     pos variable     label col_type missing levels     value_labels #>   <int> <chr>        <chr> <chr>      <int> <chr>      <chr>        #> 1     1 Sepal.Length NA    dbl            0 NA         NA           #> 2     2 Sepal.Width  NA    dbl            0 NA         NA           #> 3     3 Petal.Length NA    dbl            0 NA         NA           #> 4     4 Petal.Width  NA    dbl            0 NA         NA           #> 5     5 Species      NA    fct            0 setosa     NA           #> 6     5 Species      NA    fct            0 versicolor NA           #> 7     5 Species      NA    fct            0 virginica  NA            # Labelled data d <- dplyr::tibble(   region = labelled_spss(     c(1, 2, 1, 9, 2, 3),     c(north = 1, south = 2, center = 3, missing = 9),     na_values = 9,     label = \"Region of the respondent\"   ),   sex = labelled(     c(\"f\", \"f\", \"m\", \"m\", \"m\", \"f\"),     c(female = \"f\", male = \"m\"),     label = \"Sex of the respondent\"   ) ) look_for(d) #>  pos variable label                    col_type missing values      #>  1   region   Region of the respondent dbl+lbl  1       [1] north   #>                                                         [2] south   #>                                                         [3] center  #>                                                         [9] missing #>  2   sex      Sex of the respondent    chr+lbl  0       [f] female  #>                                                         [m] male    d %>%   look_for() %>%   lookfor_to_long_format(sep_value_labels = \":\") #> # A tibble: 6 × 7 #>     pos variable label                    col_type missing levels value_labels #>   <int> <chr>    <chr>                    <chr>      <int> <chr>  <chr>        #> 1     1 region   Region of the respondent dbl+lbl        1 NA     1:north      #> 2     1 region   Region of the respondent dbl+lbl        1 NA     2:south      #> 3     1 region   Region of the respondent dbl+lbl        1 NA     3:center     #> 4     1 region   Region of the respondent dbl+lbl        1 NA     9:missing    #> 5     2 sex      Sex of the respondent    chr+lbl        0 NA     f:female     #> 6     2 sex      Sex of the respondent    chr+lbl        0 NA     m:male       d %>%   look_for() %>%   convert_list_columns_to_character(sep_value_labels = \":\", sep_other = \"|\") #> # A tibble: 2 × 7 #>     pos variable label                    col_type missing levels value_labels   #>   <int> <chr>    <chr>                    <chr>      <int> <chr>  <chr>          #> 1     1 region   Region of the respondent dbl+lbl        1 \"\"     1:north|2:sou… #> 2     2 sex      Sex of the respondent    chr+lbl        0 \"\"     f:female|m:ma… iris %>% look_for(details = TRUE) %>% to_gt()     #       Variable       Type       Variable label       Values       Missing values       Unique values     1 Sepal.Length dbl — 4.3 – 7.9 0 352 Sepal.Width dbl — 2 – 4.4 0 233 Petal.Length dbl — 1 – 6.9 0 434 Petal.Width dbl — 0.1 – 2.5 0 225 Species fct — setosa versicolor virginica  0 3d %>%   generate_dictionary() %>%   to_gt() %>%   gt::tab_header(gt::md(\"**Variable dictionary**\"))     Variable dictionary     #       Variable       Type       Variable label       Values       Missing values     1 region dbl+lbl Region of the respondent [1] north [2] south [3] center [9] missing  12 sex chr+lbl Sex of the respondent [f] female [m] male  0"},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Set SPSS missing values — na_values","title":"Get / Set SPSS missing values — na_values","text":"Get / Set SPSS missing values","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Set SPSS missing values — na_values","text":"","code":"na_values(x)  na_values(x) <- value  na_range(x)  na_range(x) <- value  get_na_values(x)  get_na_range(x)  set_na_values(.data, ..., .values = NA, .strict = TRUE)  set_na_range(.data, ..., .values = NA, .strict = TRUE)  is_user_na(x)  is_regular_na(x)  user_na_to_na(x)  user_na_to_regular_na(x)  user_na_to_tagged_na(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Set SPSS missing values — na_values","text":"x vector, data frame, survey design. value vector values also considered missing (na_values) numeric vector length two giving (inclusive) extents range (na_values, use -Inf Inf want range open ended). .data data frame, survey design vector ... name-value pairs missing values (see examples) .values missing values applied data.frame, using syntax value na_values(df) <- value na_range(df) <- value. .strict error returned labels correspond column x?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Set SPSS missing values — na_values","text":"na_values() return vector values also considered missing. na_range() return numeric vector length two giving (inclusive) extents range. set_na_values() set_na_range() return updated copy .data.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get / Set SPSS missing values — na_values","text":"See haven::labelled_spss() presentation SPSS's user defined missing values. Note base::.na() return TRUE user defined missing values. also return TRUE regular NA values. want test specific value user NA regular NA, use is_user_na(). want test value regular NA user NA, tagged NA, use is_regular_na(). can use user_na_to_na() convert user defined missing values regular NA. Note value label attached user defined missing value lost. user_na_to_regular_na() synonym user_na_to_na(). method user_na_to_tagged_na() convert user defined missing values haven::tagged_na(), preserving value labels. Please note haven::tagged_na() defined double vectors. Therefore, integer haven_labelled_spss vectors converted double haven_labelled vectors; user_na_to_tagged_na() applied character haven_labelled_spss vector. tagged_na_to_user_na() opposite user_na_to_tagged_na() convert tagged NA user defined missing values.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get / Set SPSS missing values — na_values","text":"get_na_values() identical na_values() get_na_range() na_range(). set_na_values() set_na_range() used dplyr syntax.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/na_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Set SPSS missing values — na_values","text":"","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 9) ) v #> <labelled<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>      9 don't know na_values(v) <- 9 na_values(v) #> [1] 9 v #> <labelled_spss<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #> Missing values: 9 #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>      9 don't know  is.na(v) # TRUE for the 6th and 10th values #>  [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE is_user_na(v) # TRUE only for the 6th value #>  [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  user_na_to_na(v) #> <labelled<double>[10]> #>  [1]  1  2  2  2  3 NA  1  3  2 NA #>  #> Labels: #>  value label #>      1   yes #>      3    no na_values(v) <- NULL v #> <labelled<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>      9 don't know na_range(v) <- c(5, Inf) na_range(v) #> [1]   5 Inf v #> <labelled_spss<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #> Missing range:  [5, Inf] #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>      9 don't know user_na_to_na(v) #> <labelled<double>[10]> #>  [1]  1  2  2  2  3 NA  1  3  2 NA #>  #> Labels: #>  value label #>      1   yes #>      3    no user_na_to_tagged_na(v) #> <labelled<double>[10]> #>  [1]     1     2     2     2     3 NA(a)     1     3     2    NA #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>  NA(a) don't know  # it is not recommended to mix user NAs and tagged NAs x <- c(NA, 9, tagged_na(\"a\")) na_values(x) <- 9 x #> <labelled_spss<double>[3]> #> [1]    NA     9 NA(a) #> Missing values: 9 is.na(x) #> [1] TRUE TRUE TRUE is_user_na(x) #> [1] FALSE  TRUE FALSE is_tagged_na(x) #> [1] FALSE FALSE  TRUE is_regular_na(x) #> [1]  TRUE FALSE FALSE  if (require(dplyr)) {   # setting value label and user NAs   df <- tibble(s1 = c(\"M\", \"M\", \"F\", \"F\"), s2 = c(1, 1, 2, 9)) %>%     set_value_labels(s2 = c(yes = 1, no = 2)) %>%     set_na_values(s2 = 9)   na_values(df)    # removing missing values   df <- df %>% set_na_values(s2 = NULL)   df$s2    # example with a vector   v <- 1:10   v <- v %>% set_na_values(5, 6, 7)   v   v %>% set_na_range(8, 10)   v %>% set_na_range(.values = c(9, 10))   v %>% set_na_values(NULL) } #> <labelled<integer>[10]> #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://larmarange.github.io/labelled/dev/reference/names_prefixed_by_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a named vector into a vector of names prefixed by values — names_prefixed_by_values","title":"Turn a named vector into a vector of names prefixed by values — names_prefixed_by_values","text":"Turn named vector vector names prefixed values","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/names_prefixed_by_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a named vector into a vector of names prefixed by values — names_prefixed_by_values","text":"","code":"names_prefixed_by_values(x, sep = \"[]\")"},{"path":"https://larmarange.github.io/labelled/dev/reference/names_prefixed_by_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a named vector into a vector of names prefixed by values — names_prefixed_by_values","text":"x vector prefixed sep (string) separator value name","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/names_prefixed_by_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a named vector into a vector of names prefixed by values — names_prefixed_by_values","text":"","code":"df <- dplyr::tibble(   c1 = labelled(c(\"M\", \"M\", \"F\"), c(Male = \"M\", Female = \"F\")),   c2 = labelled(c(1, 1, 2), c(Yes = 1, No = 2)) ) val_labels(df$c1) #>   Male Female  #>    \"M\"    \"F\"  val_labels(df$c1) %>% names_prefixed_by_values() #>         Male       Female  #>   \"[M] Male\" \"[F] Female\"  val_labels(df) #> $c1 #>   Male Female  #>    \"M\"    \"F\"  #>  #> $c2 #> Yes  No  #>   1   2  #>  val_labels(df) %>% names_prefixed_by_values() #> $c1 #>         Male       Female  #>   \"[M] Male\" \"[F] Female\"  #>  #> $c2 #>       Yes        No  #> \"[1] Yes\"  \"[2] No\"  #>  val_labels(df) %>% names_prefixed_by_values(sep = \":\") #> $c1 #>       Male     Female  #>   \"M:Male\" \"F:Female\"  #>  #> $c2 #>     Yes      No  #> \"1:Yes\"  \"2:No\"  #>"},{"path":"https://larmarange.github.io/labelled/dev/reference/nolabel_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode values with no label to NA — nolabel_to_na","title":"Recode values with no label to NA — nolabel_to_na","text":"labelled variables, values label recoded NA.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/nolabel_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode values with no label to NA — nolabel_to_na","text":"","code":"nolabel_to_na(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/nolabel_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode values with no label to NA — nolabel_to_na","text":"x Object recode.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/nolabel_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode values with no label to NA — nolabel_to_na","text":"","code":"v <- labelled(c(1, 2, 9, 1, 9), c(yes = 1, no = 2)) nolabel_to_na(v) #> <labelled<double>[5]> #> [1]  1  2 NA  1 NA #>  #> Labels: #>  value label #>      1   yes #>      2    no"},{"path":"https://larmarange.github.io/labelled/dev/reference/recode.haven_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode values — recode.haven_labelled","title":"Recode values — recode.haven_labelled","text":"Extend dplyr::recode() method dplyr works labelled vectors.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/recode.haven_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode values — recode.haven_labelled","text":"","code":"# S3 method for class 'haven_labelled' recode(   .x,   ...,   .default = NULL,   .missing = NULL,   .keep_value_labels = TRUE,   .combine_value_labels = FALSE,   .sep = \" / \" )"},{"path":"https://larmarange.github.io/labelled/dev/reference/recode.haven_labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode values — recode.haven_labelled","text":".x vector modify ... <dynamic-dots> Replacements. character factor .x, named replacement based name. numeric .x, can named . named, replacement done based position .e. .x represents positions look replacements. See examples. named, argument names current values replaced, argument values new (replacement) values. replacements must type, must either length one length .x. .default supplied, values otherwise matched given value. supplied replacements type original values .x, unmatched values changed. supplied replacements compatible, unmatched values replaced NA. .default must either length 1 length .x. .missing supplied, missing values .x replaced value. Must either length 1 length .x. .keep_value_labels TRUE, keep original value labels. FALSE, remove value labels. .combine_value_labels TRUE, combine original value labels generate new value labels. Note unexpected results obtained old value recoded several different new values. .sep Separator used combining value labels.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/recode.haven_labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode values — recode.haven_labelled","text":"","code":"x <- labelled(1:3, c(yes = 1, no = 2)) x #> <labelled<integer>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      1   yes #>      2    no dplyr::recode(x, `3` = 2L) #> <labelled<integer>[3]> #> [1] 1 2 2 #>  #> Labels: #>  value label #>      1   yes #>      2    no  # do not keep value labels dplyr::recode(x, `3` = 2L, .keep_value_labels = FALSE) #> [1] 1 2 2  # be careful, changes are not of the same type (here integers), # NA arecreated dplyr::recode(x, `3` = 2) #> Warning: Unreplaced values treated as NA as `.x` is not compatible. #> Please specify replacements exhaustively or supply `.default`. #> <labelled<double>[3]> #> [1] NA NA  2 #>  #> Labels: #>  value label #>      1   yes #>      2    no  # except if you provide .default or new values for all old values dplyr::recode(x, `1` = 1, `2` = 1, `3` = 2) #> <labelled<double>[3]> #> [1] 1 1 2 #>  #> Labels: #>  value label #>      1   yes #>      2    no  # if you change the type of the vector (here transformed into character) # value labels are lost dplyr::recode(x, `3` = \"b\", .default = \"a\") #> Warning: The type of `.x` (character) has been changed and value labels have been lost. #> [1] \"a\" \"a\" \"b\"  # use .keep_value_labels = FALSE to avoid a warning dplyr::recode(x, `3` = \"b\", .default = \"a\", .keep_value_labels = FALSE) #> [1] \"a\" \"a\" \"b\"  # combine value labels x <- labelled(   1:4,   c(     \"strongly agree\" = 1,     \"agree\" = 2,     \"disagree\" = 3,     \"strongly disagree\" = 4   ) ) dplyr::recode(   x,   `1` = 1L,   `2` = 1L,   `3` = 2L,   `4` = 2L,   .combine_value_labels = TRUE ) #> <labelled<integer>[4]> #> [1] 1 1 2 2 #>  #> Labels: #>  value                        label #>      1       strongly agree / agree #>      2 disagree / strongly disagree dplyr::recode(   x,   `2` = 1L,   `4` = 3L,   .combine_value_labels = TRUE ) #> <labelled<integer>[4]> #> [1] 1 1 3 3 #>  #> Labels: #>  value                        label #>      1       strongly agree / agree #>      3 disagree / strongly disagree dplyr::recode(   x,   `2` = 1L,   `4` = 3L,   .combine_value_labels = TRUE,   .sep = \" or \" ) #> <labelled<integer>[4]> #> [1] 1 1 3 3 #>  #> Labels: #>  value                         label #>      1       strongly agree or agree #>      3 disagree or strongly disagree dplyr::recode(   x,   `2` = 1L,   .default = 2L,   .combine_value_labels = TRUE ) #> <labelled<integer>[4]> #> [1] 2 1 2 2 #>  #> Labels: #>  value                                         label #>      1                                         agree #>      2 strongly agree / disagree / strongly disagree  # example when combining some values without a label y <- labelled(1:4, c(\"strongly agree\" = 1)) dplyr::recode(y, `2` = 1L, `4` = 3L, .combine_value_labels = TRUE) #> <labelled<integer>[4]> #> [1] 1 1 3 3 #>  #> Labels: #>  value          label #>      1 strongly agree"},{"path":"https://larmarange.github.io/labelled/dev/reference/recode_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode some values based on condition — recode_if","title":"Recode some values based on condition — recode_if","text":"Recode values based condition","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/recode_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode some values based on condition — recode_if","text":"","code":"recode_if(x, condition, true)"},{"path":"https://larmarange.github.io/labelled/dev/reference/recode_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode some values based on condition — recode_if","text":"x vector recoded condition logical vector length x true values use TRUE values condition. must either length x, length 1.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/recode_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode some values based on condition — recode_if","text":"Returns x values replaced true condition TRUE unchanged condition FALSE NA. Variable value labels preserved unchanged.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/recode_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode some values based on condition — recode_if","text":"","code":"v <- labelled(c(1, 2, 2, 9), c(yes = 1, no = 2)) v %>% recode_if(v == 9, NA) #> <labelled<double>[4]> #> [1]  1  2  2 NA #>  #> Labels: #>  value label #>      1   yes #>      2    no if (require(dplyr)) {   df <- tibble(s1 = c(\"M\", \"M\", \"F\"), s2 = c(1, 2, 1)) %>%     set_value_labels(       s1 = c(Male = \"M\", Female = \"F\"),       s2 = c(A = 1, B = 2)     ) %>%     set_variable_labels(s1 = \"Gender\", s2 = \"Group\")    df <- df %>%     mutate(       s3 = s2 %>% recode_if(s1 == \"F\", 2),       s4 = s2 %>% recode_if(s1 == \"M\", s2 + 10)     )   df   df %>% look_for() } #>  pos variable label  col_type missing values     #>  1   s1       Gender chr+lbl  0       [M] Male   #>                                       [F] Female #>  2   s2       Group  dbl+lbl  0       [1] A      #>                                       [2] B      #>  3   s3       Group  dbl+lbl  0       [1] A      #>                                       [2] B      #>  4   s4       Group  dbl+lbl  0       [1] A      #>                                       [2] B"},{"path":"https://larmarange.github.io/labelled/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% haven format_tagged_na, .labelled, is_tagged_na, labelled, labelled_spss, na_tag, print_labels, print_tagged_na, tagged_na","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove attributes — remove_attributes","title":"Remove attributes — remove_attributes","text":"function removes specified attributes. applied data.frame, also remove recursively specified attributes column data.frame.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove attributes — remove_attributes","text":"","code":"remove_attributes(x, attributes)"},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove attributes — remove_attributes","text":"x object attributes character vector indicating attributes remove","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove attributes — remove_attributes","text":"","code":"if (FALSE) { # \\dontrun{ library(haven) path <- system.file(\"examples\", \"iris.sav\", package = \"haven\") d <- read_sav(path) str(d) d <- remove_attributes(d, \"format.spss\") str(d) } # }"},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove variable label, value labels and user defined missing values — remove_labels","title":"Remove variable label, value labels and user defined missing values — remove_labels","text":"Use remove_var_label() remove variable label, remove_val_labels() remove value labels, remove_user_na() remove user defined missing values (na_values na_range) remove_labels() remove .","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove variable label, value labels and user defined missing values — remove_labels","text":"","code":"remove_labels(   x,   user_na_to_na = FALSE,   keep_var_label = FALSE,   user_na_to_tagged_na = FALSE )  remove_var_label(x)  remove_val_labels(x)  remove_user_na(x, user_na_to_na = FALSE, user_na_to_tagged_na = FALSE)"},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove variable label, value labels and user defined missing values — remove_labels","text":"x vector, data frame survey design. user_na_to_na Convert user defined missing values NA? keep_var_label Keep variable label? user_na_to_tagged_na Convert user defined missing values tagged NA? applied numeric vectors. Note integer labelled vectors converted double labelled vectors.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove variable label, value labels and user defined missing values — remove_labels","text":"careful remove_user_na() remove_labels(), user defined missing values automatically converted NA, except specify user_na_to_na = TRUE. user_na_to_na(x) equivalent remove_user_na(x, user_na_to_na = TRUE). prefer convert variables value labels factors, use to_factor() use unlabelled().","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/remove_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove variable label, value labels and user defined missing values — remove_labels","text":"","code":"x <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10)) var_label(x) <- \"A variable\" x #> <labelled_spss<integer>[10]>: A variable #>  [1]  1  2  3  4  5  6  7  8  9 10 #> Missing values: 9, 10 #>  #> Labels: #>  value label #>      1  Good #>      8   Bad  remove_labels(x) #>  [1]  1  2  3  4  5  6  7  8  9 10 remove_labels(x, user_na_to_na = TRUE) #>  [1]  1  2  3  4  5  6  7  8 NA NA remove_user_na(x, user_na_to_na = TRUE) #> <labelled<integer>[10]>: A variable #>  [1]  1  2  3  4  5  6  7  8 NA NA #>  #> Labels: #>  value label #>      1  Good #>      8   Bad remove_user_na(x, user_na_to_tagged_na = TRUE) #> ℹ `x` has been converted into a double vector. #> <labelled<double>[10]>: A variable #>  [1]     1     2     3     4     5     6     7     8 NA(a) NA(b) #>  #> Labels: #>  value label #>      1  Good #>      8   Bad"},{"path":"https://larmarange.github.io/labelled/dev/reference/sort_val_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort value labels — sort_val_labels","title":"Sort value labels — sort_val_labels","text":"Sort value labels according values labels","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/sort_val_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort value labels — sort_val_labels","text":"","code":"sort_val_labels(x, according_to = c(\"values\", \"labels\"), decreasing = FALSE)"},{"path":"https://larmarange.github.io/labelled/dev/reference/sort_val_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort value labels — sort_val_labels","text":"x labelled vector data.frame according_to According values labels? decreasing decreasing order?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/sort_val_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort value labels — sort_val_labels","text":"","code":"v <- labelled(c(1, 2, 3), c(maybe = 2, yes = 1, no = 3)) v #> <labelled<double>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      2 maybe #>      1   yes #>      3    no sort_val_labels(v) #> <labelled<double>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      1   yes #>      2 maybe #>      3    no sort_val_labels(v, decreasing = TRUE) #> <labelled<double>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      3    no #>      2 maybe #>      1   yes sort_val_labels(v, \"l\") #> <labelled<double>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      2 maybe #>      3    no #>      1   yes sort_val_labels(v, \"l\", TRUE) #> <labelled<double>[3]> #> [1] 1 2 3 #>  #> Labels: #>  value label #>      1   yes #>      3    no #>      2 maybe"},{"path":"https://larmarange.github.io/labelled/dev/reference/tagged_na_to_user_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert tagged NAs into user NAs — tagged_na_to_user_na","title":"Convert tagged NAs into user NAs — tagged_na_to_user_na","text":"tagged_na_to_user_na() opposite user_na_to_tagged_na() convert tagged NA user defined missing values (see labelled_spss()).","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/tagged_na_to_user_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert tagged NAs into user NAs — tagged_na_to_user_na","text":"","code":"tagged_na_to_user_na(x, user_na_start = NULL)  tagged_na_to_regular_na(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/tagged_na_to_user_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert tagged NAs into user NAs — tagged_na_to_user_na","text":"x vector, data frame survey design user_na_start minimum value new user na, NULL, computed automatically (maximum observed values + 1)","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/tagged_na_to_user_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert tagged NAs into user NAs — tagged_na_to_user_na","text":"tagged_na_to_regular_na() converts tagged NAs regular NAs.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/tagged_na_to_user_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert tagged NAs into user NAs — tagged_na_to_user_na","text":"","code":"x <- c(1:5, tagged_na(\"a\"), tagged_na(\"z\"), NA) x #> [1]  1  2  3  4  5 NA NA NA print_tagged_na(x) #> [1]     1     2     3     4     5 NA(a) NA(z)    NA tagged_na_to_user_na(x) #> <labelled_spss<double>[8]> #> [1]  1  2  3  4  5  6  7 NA #> Missing range:  [6, 7] #>  #> Labels: #>  value label #>      6 NA(a) #>      7 NA(z) tagged_na_to_user_na(x, user_na_start = 10) #> <labelled_spss<double>[8]> #> [1]  1  2  3  4  5 10 11 NA #> Missing range:  [10, 11] #>  #> Labels: #>  value label #>     10 NA(a) #>     11 NA(z)  y <- c(1, 0, 1, tagged_na(\"r\"), 0, tagged_na(\"d\")) val_labels(y) <- c(   no = 0, yes = 1,   \"don't know\" = tagged_na(\"d\"),   refusal = tagged_na(\"r\") ) y #> <labelled<double>[6]> #> [1]     1     0     1 NA(r)     0 NA(d) #>  #> Labels: #>  value      label #>      0         no #>      1        yes #>  NA(d) don't know #>  NA(r)    refusal tagged_na_to_user_na(y, user_na_start = 8) #> <labelled_spss<double>[6]> #> [1] 1 0 1 9 0 8 #> Missing range:  [8, 9] #>  #> Labels: #>  value      label #>      0         no #>      1        yes #>      8 don't know #>      9    refusal tagged_na_to_regular_na(y) #> <labelled<double>[6]> #> [1]  1  0  1 NA  0 NA #>  #> Labels: #>  value label #>      0    no #>      1   yes tagged_na_to_regular_na(y) %>% is_tagged_na() #> [1] FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://larmarange.github.io/labelled/dev/reference/test_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Datasets for testing — x_haven_2.0","title":"Datasets for testing — x_haven_2.0","text":"datasets used test compatibility foreign (spss_foreign), haven_2.0 (x_haven_2.0, x_spss_haven_2.0) packages","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/test_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Datasets for testing — x_haven_2.0","text":"","code":"x_haven_2.0  x_spss_haven_2.0  spss_file  dta_file"},{"path":"https://larmarange.github.io/labelled/dev/reference/test_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Datasets for testing — x_haven_2.0","text":"object class haven_labelled length 6. object class haven_labelled_spss (inherits haven_labelled) length 10. object class list length 13. object class data.frame 47 rows 6 columns.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert input to a character vector — to_character","title":"Convert input to a character vector — to_character","text":"default, to_character() wrapper base::.character(). labelled vector, to_character allows specify value, labels labels prefixed values used conversion.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert input to a character vector — to_character","text":"","code":"to_character(x, ...)  # S3 method for class 'double' to_character(x, explicit_tagged_na = FALSE, ...)  # S3 method for class 'haven_labelled' to_character(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   nolabel_to_na = FALSE,   user_na_to_na = FALSE,   explicit_tagged_na = FALSE,   ... )  # S3 method for class 'data.frame' to_character(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   nolabel_to_na = FALSE,   user_na_to_na = FALSE,   explicit_tagged_na = FALSE,   labelled_only = TRUE,   ... )  # S3 method for class 'survey.design' to_character(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   nolabel_to_na = FALSE,   user_na_to_na = FALSE,   explicit_tagged_na = FALSE,   labelled_only = TRUE,   ... )"},{"path":"https://larmarange.github.io/labelled/dev/reference/to_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert input to a character vector — to_character","text":"x Object coerce character vector. ... arguments passed method. explicit_tagged_na tagged NA kept? levels used factor levels: labels, values labels prefixed values? nolabel_to_na values label converted NA? user_na_to_na user defined missing values NA? labelled_only data.frame, convert labelled variables factors?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert input to a character vector — to_character","text":"values label, automatic labels created, except nolabel_to_na TRUE. applied data.frame, labelled vectors converted default character. Use labelled_only = FALSE convert variables characters.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert input to a character vector — to_character","text":"","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 9) ) to_character(v) #>  [1] \"yes\"        \"2\"          \"2\"          \"2\"          \"no\"         #>  [6] \"don't know\" \"yes\"        \"no\"         \"2\"          NA           to_character(v, nolabel_to_na = TRUE) #>  [1] \"yes\"        NA           NA           NA           \"no\"         #>  [6] \"don't know\" \"yes\"        \"no\"         NA           NA           to_character(v, \"v\") #>  [1] \"1\" \"2\" \"2\" \"2\" \"3\" \"9\" \"1\" \"3\" \"2\" NA  to_character(v, \"p\") #>  [1] \"[1] yes\"        \"[2] 2\"          \"[2] 2\"          \"[2] 2\"          #>  [5] \"[3] no\"         \"[9] don't know\" \"[1] yes\"        \"[3] no\"         #>  [9] \"[2] 2\"          NA                df <- data.frame(   a = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2)),   b = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2, DK = 3)),   c = labelled(     c(\"a\", \"a\", \"b\", \"c\"),     labels = c(No = \"a\", Maybe = \"b\", Yes = \"c\")   ),   d = 1:4,   e = factor(c(\"item1\", \"item2\", \"item1\", \"item2\")),   f = c(\"itemA\", \"itemA\", \"itemB\", \"itemB\"),   stringsAsFactors = FALSE )  if (require(dplyr)) {   glimpse(df)   glimpse(to_character(df))   glimpse(to_character(df, labelled_only = FALSE)) } #> Rows: 4 #> Columns: 6 #> $ a <dbl+lbl> 1, 1, 2, 3 #> $ b <dbl+lbl> 1, 1, 2, 3 #> $ c <chr+lbl> \"a\", \"a\", \"b\", \"c\" #> $ d <int> 1, 2, 3, 4 #> $ e <fct> item1, item2, item1, item2 #> $ f <chr> \"itemA\", \"itemA\", \"itemB\", \"itemB\" #> Rows: 4 #> Columns: 6 #> $ a <chr> \"No\", \"No\", \"Yes\", \"3\" #> $ b <chr> \"No\", \"No\", \"Yes\", \"DK\" #> $ c <chr> \"No\", \"No\", \"Maybe\", \"Yes\" #> $ d <int> 1, 2, 3, 4 #> $ e <fct> item1, item2, item1, item2 #> $ f <chr> \"itemA\", \"itemA\", \"itemB\", \"itemB\" #> Rows: 4 #> Columns: 6 #> $ a <chr> \"No\", \"No\", \"Yes\", \"3\" #> $ b <chr> \"No\", \"No\", \"Yes\", \"DK\" #> $ c <chr> \"No\", \"No\", \"Maybe\", \"Yes\" #> $ d <chr> \"1\", \"2\", \"3\", \"4\" #> $ e <chr> \"item1\", \"item2\", \"item1\", \"item2\" #> $ f <chr> \"itemA\", \"itemA\", \"itemB\", \"itemB\""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert input to a factor. — to_factor","title":"Convert input to a factor. — to_factor","text":"base function base::.factor() generic, variant . default, to_factor() wrapper base::.factor(). Please note to_factor() differs slightly haven::as_factor() method provided haven package. unlabelled(x) shortcut to_factor(x, strict = TRUE, unclass = TRUE, labelled_only = TRUE).","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert input to a factor. — to_factor","text":"","code":"to_factor(x, ...)  # S3 method for class 'haven_labelled' to_factor(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   ordered = FALSE,   nolabel_to_na = FALSE,   sort_levels = c(\"auto\", \"none\", \"labels\", \"values\"),   decreasing = FALSE,   drop_unused_labels = FALSE,   user_na_to_na = FALSE,   strict = FALSE,   unclass = FALSE,   explicit_tagged_na = FALSE,   ... )  # S3 method for class 'data.frame' to_factor(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   ordered = FALSE,   nolabel_to_na = FALSE,   sort_levels = c(\"auto\", \"none\", \"labels\", \"values\"),   decreasing = FALSE,   labelled_only = TRUE,   drop_unused_labels = FALSE,   user_na_to_na = FALSE,   strict = FALSE,   unclass = FALSE,   explicit_tagged_na = FALSE,   ... )  # S3 method for class 'survey.design' to_factor(   x,   levels = c(\"labels\", \"values\", \"prefixed\"),   ordered = FALSE,   nolabel_to_na = FALSE,   sort_levels = c(\"auto\", \"none\", \"labels\", \"values\"),   decreasing = FALSE,   labelled_only = TRUE,   drop_unused_labels = FALSE,   user_na_to_na = FALSE,   strict = FALSE,   unclass = FALSE,   explicit_tagged_na = FALSE,   ... )  unlabelled(x, ...)"},{"path":"https://larmarange.github.io/labelled/dev/reference/to_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert input to a factor. — to_factor","text":"x Object coerce factor. ... arguments passed method. levels used factor levels: labels, values labels prefixed values? ordered TRUE ordinal factors, FALSE (default) nominal factors. nolabel_to_na values label converted NA? sort_levels factor levels sorted? (see Details) decreasing levels sorted decreasing order? drop_unused_labels unused value labels dropped? (applied strict = FALSE) user_na_to_na Convert user defined missing values NA? strict Convert factor values defined label? unclass converted factor (strict = TRUE), convert character numeric factor applying base::unclass()? explicit_tagged_na tagged NA (cf. haven::tagged_na()) kept explicit factor levels? labelled_only data.frame, convert labelled variables factors?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert input to a factor. — to_factor","text":"values label, automatic labels created, except nolabel_to_na TRUE. sort_levels == 'values', levels sorted according values x. sort_levels == 'labels', levels sorted according labels' names. sort_levels == 'none', levels order value labels defined x. labels automatically created, added end. sort_levels == 'auto', sort_levels == 'none' used, except values defined label. case, sort_levels == 'values' applied. applied data.frame, labelled vectors converted default factor. Use labelled_only = FALSE convert variables factors. unlabelled() shortcut quickly removing value labels vector data.frame. observed values value label, vector converted factor. Otherwise, vector unclassed. want remove value labels cases, use remove_val_labels().","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert input to a factor. — to_factor","text":"","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 9) ) to_factor(v) #>  [1] yes        2          2          2          no         don't know #>  [7] yes        no         2          <NA>       #> Levels: yes 2 no don't know to_factor(v, nolabel_to_na = TRUE) #>  [1] yes        <NA>       <NA>       <NA>       no         don't know #>  [7] yes        no         <NA>       <NA>       #> Levels: yes no don't know to_factor(v, \"p\") #>  [1] [1] yes        [2] 2          [2] 2          [2] 2          [3] no         #>  [6] [9] don't know [1] yes        [3] no         [2] 2          <NA>           #> Levels: [1] yes [2] 2 [3] no [9] don't know to_factor(v, sort_levels = \"v\") #>  [1] yes        2          2          2          no         don't know #>  [7] yes        no         2          <NA>       #> Levels: yes 2 no don't know to_factor(v, sort_levels = \"n\") #>  [1] yes        2          2          2          no         don't know #>  [7] yes        no         2          <NA>       #> Levels: yes no don't know 2 to_factor(v, sort_levels = \"l\") #>  [1] yes        2          2          2          no         don't know #>  [7] yes        no         2          <NA>       #> Levels: 2 don't know no yes  x <- labelled(c(\"H\", \"M\", \"H\", \"L\"), c(low = \"L\", medium = \"M\", high = \"H\")) to_factor(x, ordered = TRUE) #> [1] high   medium high   low    #> Levels: low < medium < high  # Strict conversion v <- labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2)) to_factor(v) #> [1] No  No  Yes 3   #> Levels: No Yes 3 to_factor(v, strict = TRUE) # Not converted because 3 does not have a label #> <labelled<double>[4]> #> [1] 1 1 2 3 #>  #> Labels: #>  value label #>      1    No #>      2   Yes to_factor(v, strict = TRUE, unclass = TRUE) #> [1] 1 1 2 3 #> attr(,\"labels\") #>  No Yes  #>   1   2   df <- data.frame(   a = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2)),   b = labelled(c(1, 1, 2, 3), labels = c(No = 1, Yes = 2, DK = 3)),   c = labelled(     c(\"a\", \"a\", \"b\", \"c\"),     labels = c(No = \"a\", Maybe = \"b\", Yes = \"c\")   ),   d = 1:4,   e = factor(c(\"item1\", \"item2\", \"item1\", \"item2\")),   f = c(\"itemA\", \"itemA\", \"itemB\", \"itemB\"),   stringsAsFactors = FALSE ) if (require(dplyr)) {   glimpse(df)   glimpse(unlabelled(df)) } #> Rows: 4 #> Columns: 6 #> $ a <dbl+lbl> 1, 1, 2, 3 #> $ b <dbl+lbl> 1, 1, 2, 3 #> $ c <chr+lbl> \"a\", \"a\", \"b\", \"c\" #> $ d <int> 1, 2, 3, 4 #> $ e <fct> item1, item2, item1, item2 #> $ f <chr> \"itemA\", \"itemA\", \"itemB\", \"itemB\" #> Rows: 4 #> Columns: 6 #> $ a <dbl> 1, 1, 2, 3 #> $ b <fct> No, No, Yes, DK #> $ c <fct> No, No, Maybe, Yes #> $ d <int> 1, 2, 3, 4 #> $ e <fct> item1, item2, item1, item2 #> $ f <chr> \"itemA\", \"itemA\", \"itemB\", \"itemB\""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to labelled data — to_labelled","title":"Convert to labelled data — to_labelled","text":"Convert factor data imported foreign memisc labelled data.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to labelled data — to_labelled","text":"","code":"to_labelled(x, ...)  # S3 method for class 'data.frame' to_labelled(x, ...)  # S3 method for class 'list' to_labelled(x, ...)  # S3 method for class 'data.set' to_labelled(x, ...)  # S3 method for class 'importer' to_labelled(x, ...)  foreign_to_labelled(x)  memisc_to_labelled(x)  # S3 method for class 'factor' to_labelled(x, labels = NULL, .quiet = FALSE, ...)"},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to labelled data — to_labelled","text":"x Factor dataset convert labelled data frame ... used labels converting factor : optional named vector indicating factor levels coded. factor level found labels, converted NA. .quiet display warnings prefixed factors duplicated codes","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to labelled data — to_labelled","text":"tbl data frame labelled vector.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to labelled data — to_labelled","text":"to_labelled() general wrapper calling appropriate sub-functions. memisc_to_labelled() converts memisc::data.set()]` object created memisc package labelled data frame. foreign_to_labelled() converts data imported foreign::read.spss() foreign::read.dta() foreign package labelled data frame, .e. using haven::labelled(). Factors converted. Therefore, use use.value.labels = FALSE importing foreign::read.spss() convert.factors = FALSE importing foreign::read.dta(). convert correctly defined missing values imported foreign::read.spss(), used .data.frame = FALSE use.missings = FALSE. used option .data.frame = TRUE, meta data describing missing values attached import. used use.missings = TRUE, missing values converted NA. far, missing values defined Stata always imported NA foreign::read.dta() retrieved foreign_to_labelled(). convert labelled vector factor prefix, .e. using to_factor(levels = \"prefixed\"), to_labelled.factor() able reconvert labelled vector values labels.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/to_labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to labelled data — to_labelled","text":"","code":"if (FALSE) { # \\dontrun{ # from foreign library(foreign) sav <- system.file(\"files\", \"electric.sav\", package = \"foreign\") df <- to_labelled(read.spss(   sav,   to.data.frame = FALSE,   use.value.labels = FALSE,   use.missings = FALSE ))  # from memisc library(memisc) nes1948.por <- UnZip(\"anes/NES1948.ZIP\", \"NES1948.POR\", package = \"memisc\") nes1948 <- spss.portable.file(nes1948.por) ds <- as.data.set(nes1948) df <- to_labelled(ds) } # }  # Converting factors to labelled vectors f <- factor(   c(\"yes\", \"yes\", \"no\", \"no\", \"don't know\", \"no\", \"yes\", \"don't know\") ) to_labelled(f) #> <labelled<double>[8]> #> [1] 3 3 2 2 1 2 3 1 #>  #> Labels: #>  value      label #>      1 don't know #>      2         no #>      3        yes to_labelled(f, c(\"yes\" = 1, \"no\" = 2, \"don't know\" = 9)) #> <labelled<double>[8]> #> [1] 1 1 2 2 9 2 1 9 #>  #> Labels: #>  value      label #>      1        yes #>      2         no #>      9 don't know to_labelled(f, c(\"yes\" = 1, \"no\" = 2)) #> <labelled<double>[8]> #> [1]  1  1  2  2 NA  2  1 NA #>  #> Labels: #>  value label #>      1   yes #>      2    no to_labelled(f, c(\"yes\" = \"Y\", \"no\" = \"N\", \"don't know\" = \"DK\")) #> <labelled<character>[8]> #> [1] Y  Y  N  N  DK N  Y  DK #>  #> Labels: #>  value      label #>      Y        yes #>      N         no #>     DK don't know  s1 <- labelled(c(\"M\", \"M\", \"F\"), c(Male = \"M\", Female = \"F\")) labels <- val_labels(s1) f1 <- to_factor(s1) f1 #> [1] Male   Male   Female #> Levels: Male Female  to_labelled(f1) #> <labelled<double>[3]> #> [1] 1 1 2 #>  #> Labels: #>  value  label #>      1   Male #>      2 Female identical(s1, to_labelled(f1)) #> [1] FALSE to_labelled(f1, labels) #> <labelled<character>[3]> #> [1] M M F #>  #> Labels: #>  value  label #>      M   Male #>      F Female identical(s1, to_labelled(f1, labels)) #> [1] TRUE  l <- labelled(   c(1, 1, 2, 2, 9, 2, 1, 9),   c(\"yes\" = 1, \"no\" = 2, \"don't know\" = 9) ) f <- to_factor(l, levels = \"p\") f #> [1] [1] yes        [1] yes        [2] no         [2] no         [9] don't know #> [6] [2] no         [1] yes        [9] don't know #> Levels: [1] yes [2] no [9] don't know to_labelled(f) #> <labelled<double>[8]> #> [1] 1 1 2 2 9 2 1 9 #>  #> Labels: #>  value      label #>      1        yes #>      2         no #>      9 don't know identical(to_labelled(f), l) #> [1] TRUE"},{"path":"https://larmarange.github.io/labelled/dev/reference/unique_tagged_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique elements, duplicated, ordering and sorting with tagged NAs — unique_tagged_na","title":"Unique elements, duplicated, ordering and sorting with tagged NAs — unique_tagged_na","text":"adaptations base::unique(), base::duplicated(), base::order() base::sort() treats tagged NAs distinct values.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/unique_tagged_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique elements, duplicated, ordering and sorting with tagged NAs — unique_tagged_na","text":"","code":"unique_tagged_na(x, fromLast = FALSE)  duplicated_tagged_na(x, fromLast = FALSE)  order_tagged_na(   x,   na.last = TRUE,   decreasing = FALSE,   method = c(\"auto\", \"shell\", \"radix\"),   na_decreasing = decreasing,   untagged_na_last = TRUE )  sort_tagged_na(   x,   decreasing = FALSE,   na.last = TRUE,   na_decreasing = decreasing,   untagged_na_last = TRUE )"},{"path":"https://larmarange.github.io/labelled/dev/reference/unique_tagged_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique elements, duplicated, ordering and sorting with tagged NAs — unique_tagged_na","text":"x vector fromLast logical indicating duplication considered last na.last TRUE, missing values data put last; FALSE, put first decreasing sort order increasing decreasing? method method used, see base::order() na_decreasing sort order tagged NAs value untagged_na_last untagged NAs sorted tagged NAs? increasing decreasing?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/unique_tagged_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique elements, duplicated, ordering and sorting with tagged NAs — unique_tagged_na","text":"","code":"x <- c(1, 2, tagged_na(\"a\"), 1, tagged_na(\"z\"), 2, tagged_na(\"a\"), NA) x %>% print_tagged_na() #> [1]     1     2 NA(a)     1 NA(z)     2 NA(a)    NA  unique(x) %>% print_tagged_na() #> [1]     1     2 NA(a) unique_tagged_na(x) %>% print_tagged_na() #> [1]     1     2 NA(a) NA(z)    NA  duplicated(x) #> [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE duplicated_tagged_na(x) #> [1] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  order(x) #> [1] 1 4 2 6 3 5 7 8 order_tagged_na(x) #> [1] 1 4 2 6 3 7 5 8  sort(x, na.last = TRUE) %>% print_tagged_na() #> [1]     1     1     2     2 NA(a) NA(z) NA(a)    NA sort_tagged_na(x) %>% print_tagged_na() #> [1]     1     1     2     2 NA(a) NA(a) NA(z)    NA"},{"path":"https://larmarange.github.io/labelled/dev/reference/update_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Update labelled data to last version — update_labelled","title":"Update labelled data to last version — update_labelled","text":"Labelled data imported haven version 1.1.2 created haven::labelled() version 1.1.0 using \"labelled\" \"labelled_spss\" classes.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/update_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update labelled data to last version — update_labelled","text":"","code":"update_labelled(x)  # S3 method for class 'labelled' update_labelled(x)  # S3 method for class 'haven_labelled_spss' update_labelled(x)  # S3 method for class 'haven_labelled' update_labelled(x)  # S3 method for class 'data.frame' update_labelled(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/update_labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update labelled data to last version — update_labelled","text":"x object (vector data.frame) convert.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/update_labelled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update labelled data to last version — update_labelled","text":"Since version 2.0.0 two packages, \"haven_labelled\" \"haven_labelled_spss\" used instead. Since haven 2.3.0, \"haven_labelled\" class evolving using now vctrs package. update_labelled() convert labelled vectors old new classes reconstruct labelled vectors last version package.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/update_variable_labels_with.html","id":null,"dir":"Reference","previous_headings":"","what":"Update variable/value labels with a function — update_variable_labels_with","title":"Update variable/value labels with a function — update_variable_labels_with","text":"Update variable/value labels function","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/update_variable_labels_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update variable/value labels with a function — update_variable_labels_with","text":"","code":"update_variable_labels_with(.data, .fn, .cols = dplyr::everything(), ...)  update_value_labels_with(.data, .fn, .cols = dplyr::everything(), ...)"},{"path":"https://larmarange.github.io/labelled/dev/reference/update_variable_labels_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update variable/value labels with a function — update_variable_labels_with","text":".data data frame, data frame extension (e.g. tibble) survey design .fn function used transform variable/value labels selected .cols. .cols Columns update; defaults columns. Use tidy selection. ... additional arguments passed onto .fn.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/update_variable_labels_with.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update variable/value labels with a function — update_variable_labels_with","text":"update_variable_labels_with(), possible access name variable inside .fn using names(), .e. .fn receive named character vector (see example). .fn can return .character(NA) remove variable label.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/update_variable_labels_with.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update variable/value labels with a function — update_variable_labels_with","text":"","code":"df <- iris %>%   set_variable_labels(     Sepal.Length = \"Length of sepal\",     Sepal.Width = \"Width of sepal\",     Petal.Length = \"Length of petal\",     Petal.Width = \"Width of petal\",     Species = \"Species\"   ) df$Species <- to_labelled(df$Species) df %>% look_for() #>  pos variable     label           col_type missing values         #>  1   Sepal.Length Length of sepal dbl      0                      #>  2   Sepal.Width  Width of sepal  dbl      0                      #>  3   Petal.Length Length of petal dbl      0                      #>  4   Petal.Width  Width of petal  dbl      0                      #>  5   Species      Species         dbl+lbl  0       [1] setosa     #>                                                    [2] versicolor #>                                                    [3] virginica  df %>%   update_variable_labels_with(toupper) %>%   look_for() #>  pos variable     label           col_type missing values         #>  1   Sepal.Length LENGTH OF SEPAL dbl      0                      #>  2   Sepal.Width  WIDTH OF SEPAL  dbl      0                      #>  3   Petal.Length LENGTH OF PETAL dbl      0                      #>  4   Petal.Width  WIDTH OF PETAL  dbl      0                      #>  5   Species      SPECIES         dbl+lbl  0       [1] setosa     #>                                                    [2] versicolor #>                                                    [3] virginica   # accessing variable names with names() df %>%   update_variable_labels_with(function(x){tolower(names(x))}) %>%   look_for() #>  pos variable     label        col_type missing values         #>  1   Sepal.Length sepal.length dbl      0                      #>  2   Sepal.Width  sepal.width  dbl      0                      #>  3   Petal.Length petal.length dbl      0                      #>  4   Petal.Width  petal.width  dbl      0                      #>  5   Species      species      dbl+lbl  0       [1] setosa     #>                                                 [2] versicolor #>                                                 [3] virginica   df %>%   update_variable_labels_with(toupper, .cols = dplyr::starts_with(\"S\")) %>%   look_for() #>  pos variable     label           col_type missing values         #>  1   Sepal.Length LENGTH OF SEPAL dbl      0                      #>  2   Sepal.Width  WIDTH OF SEPAL  dbl      0                      #>  3   Petal.Length Length of petal dbl      0                      #>  4   Petal.Width  Width of petal  dbl      0                      #>  5   Species      SPECIES         dbl+lbl  0       [1] setosa     #>                                                    [2] versicolor #>                                                    [3] virginica  df %>%   update_value_labels_with(toupper) %>%   look_for() #>  pos variable     label           col_type missing values         #>  1   Sepal.Length Length of sepal dbl      0                      #>  2   Sepal.Width  Width of sepal  dbl      0                      #>  3   Petal.Length Length of petal dbl      0                      #>  4   Petal.Width  Width of petal  dbl      0                      #>  5   Species      Species         dbl+lbl  0       [1] SETOSA     #>                                                    [2] VERSICOLOR #>                                                    [3] VIRGINICA"},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Set value labels — val_labels","title":"Get / Set value labels — val_labels","text":"Get / Set value labels","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Set value labels — val_labels","text":"","code":"val_labels(x, prefixed = FALSE)  val_labels(x, null_action = c(\"unclass\", \"labelled\")) <- value  val_label(x, v, prefixed = FALSE)  val_label(x, v, null_action = c(\"unclass\", \"labelled\")) <- value  get_value_labels(x, prefixed = FALSE)  set_value_labels(   .data,   ...,   .labels = NA,   .strict = TRUE,   .overwrite = TRUE,   .null_action = c(\"unclass\", \"labelled\") )  add_value_labels(   .data,   ...,   .strict = TRUE,   .null_action = c(\"unclass\", \"labelled\") )  remove_value_labels(   .data,   ...,   .strict = TRUE,   .null_action = c(\"unclass\", \"labelled\") )"},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Set value labels — val_labels","text":"x vector, data frame survey design prefixed labels prefixed values? null_action, .null_action advanced users, value = NULL, unclass vector (default) force/keep haven_labelled class (null_action = \"labelled\") value named vector val_labels() (see haven::labelled()) character string val_label(). NULL remove labels (except null_action = \"labelled\"). data frames survey design, also named list vector value labels per variable. v single value. .data data frame vector ... name-value pairs value labels (see examples) .labels value labels applied data.frame, using syntax value val_labels(df) <- value. .strict error returned labels correspond column x? .overwrite value labels already defined, overwrite ?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Set value labels — val_labels","text":"val_labels() return named vector. val_label() return single character string. set_value_labels(), add_value_labels() remove_value_labels() return updated copy .data.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get / Set value labels — val_labels","text":"get_value_labels() identical val_labels(). set_value_labels(), add_value_labels() remove_value_labels() used dplyr syntax. set_value_labels() replace list value labels, add_value_labels() remove_value_labels() update list (see examples). set_value_labels() also applied vector / data.frame column. case, can provide vector value labels using .labels several name-value pairs value labels (see example).  consider dictionary_to_value_labels() generate list variable labels dictionary data frame. Similarly, add_value_labels() remove_value_labels() also applied vectors.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Set value labels — val_labels","text":"","code":"v <- labelled(   c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),   c(yes = 1, no = 3, \"don't know\" = 9) ) val_labels(v) #>        yes         no don't know  #>          1          3          9  val_labels(v, prefixed = TRUE) #>        [1] yes         [3] no [9] don't know  #>              1              3              9  val_label(v, 2) #> NULL val_label(v, 2) <- \"maybe\" v #> <labelled<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #>  #> Labels: #>  value      label #>      1        yes #>      3         no #>      9 don't know #>      2      maybe val_label(v, 9) <- NULL v #> <labelled<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA #>  #> Labels: #>  value label #>      1   yes #>      3    no #>      2 maybe val_labels(v, null_action = \"labelled\") <- NULL v #> <labelled<double>[10]> #>  [1]  1  2  2  2  3  9  1  3  2 NA val_labels(v) <- NULL v #>  [1]  1  2  2  2  3  9  1  3  2 NA if (require(dplyr)) {   # setting value labels   df <- tibble(s1 = c(\"M\", \"M\", \"F\"), s2 = c(1, 1, 2)) %>%     set_value_labels(       s1 = c(Male = \"M\", Female = \"F\"),       s2 = c(Yes = 1, No = 2)     )   val_labels(df)    # updating value labels   df <- df %>% add_value_labels(s2 = c(Unknown = 9))   df$s2    # removing a value labels   df <- df %>% remove_value_labels(s2 = 9)   df$s2    # removing all value labels   df <- df %>% set_value_labels(s2 = NULL)   df$s2    # example on a vector   v <- 1:4   v <- set_value_labels(v, min = 1, max = 4)   v   v %>% set_value_labels(middle = 3)   v %>% set_value_labels(NULL)   v %>% set_value_labels(.labels = c(a = 1, b = 2, c = 3, d = 4))   v %>% add_value_labels(between = 2)   v %>% remove_value_labels(4) } #> <labelled<integer>[4]> #> [1] 1 2 3 4 #>  #> Labels: #>  value label #>      1   min"},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode value labels to NA — val_labels_to_na","title":"Recode value labels to NA — val_labels_to_na","text":"labelled variables, values label recoded NA.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode value labels to NA — val_labels_to_na","text":"","code":"val_labels_to_na(x)"},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode value labels to NA — val_labels_to_na","text":"x Object recode.","code":""},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/reference/val_labels_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode value labels to NA — val_labels_to_na","text":"","code":"v <- labelled(c(1, 2, 9, 1, 9), c(dk = 9)) val_labels_to_na(v) #> [1]  1  2 NA  1 NA"},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Set a variable label — var_label","title":"Get / Set a variable label — var_label","text":"Get / Set variable label","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Set a variable label — var_label","text":"","code":"var_label(x, ...)  # S3 method for class 'data.frame' var_label(   x,   unlist = FALSE,   null_action = c(\"keep\", \"fill\", \"skip\", \"na\", \"empty\"),   recurse = FALSE,   ... )  # S3 method for class 'survey.design' var_label(   x,   unlist = FALSE,   null_action = c(\"keep\", \"fill\", \"skip\", \"na\", \"empty\"),   recurse = FALSE,   ... )  var_label(x) <- value  get_variable_labels(x, ...)  set_variable_labels(   .data,   ...,   .labels = NA,   .strict = TRUE,   .overwrite = TRUE )  label_attribute(x)  get_label_attribute(x)  set_label_attribute(x, value, .overwrite = TRUE)  label_attribute(x) <- value"},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Set a variable label — var_label","text":"x vector data.frame ... name-value pairs variable labels (see examples) unlist data frames survey design, return named vector instead list null_action data frames survey design, default NULL returned columns variable label. Use \"fill\" populate column name instead, \"skip\" remove values returned list, \"na\" populate NA \"empty\" populate empty string (\"\"). recurse TRUE, apply var_label() packed columns (see tidyr::pack()) return variable labels sub-column; otherwise, label group columns returned. value character string NULL remove label data frames, var_label(), also named list character vector length number columns x. .data data frame, survey design vector .labels variable labels applied data.frame, using syntax value var_label(df) <- value. .strict error returned labels correspond column x? .overwrite variable label already defined, overwrite ?","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Set a variable label — var_label","text":"set_variable_labels() return updated copy .data.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get / Set a variable label — var_label","text":"get_variable_labels() identical var_label(). data frames survey design, using var_label()<- value named list, elements whose name match column data frame taken account. value character vector, labels order columns data frame / survey design. consider dictionary_to_variable_labels() generate list variable labels dictionary data frame. using label_attribute()<- set_label_attribute() data frame, label attribute attached data frame , column data frame. using packed columns (see tidyr::pack()), please read dedicated vignette.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get / Set a variable label — var_label","text":"set_variable_labels() used dplyr syntax.","code":""},{"path":"https://larmarange.github.io/labelled/dev/reference/var_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Set a variable label — var_label","text":"","code":"var_label(iris$Sepal.Length) #> NULL var_label(iris$Sepal.Length) <- \"Length of the sepal\" if (FALSE) { # \\dontrun{ View(iris) } # } # To remove a variable label var_label(iris$Sepal.Length) <- NULL # To change several variable labels at once var_label(iris) <- c(   \"sepal length\", \"sepal width\", \"petal length\",   \"petal width\", \"species\" ) var_label(iris) #> $Sepal.Length #> [1] \"sepal length\" #>  #> $Sepal.Width #> [1] \"sepal width\" #>  #> $Petal.Length #> [1] \"petal length\" #>  #> $Petal.Width #> [1] \"petal width\" #>  #> $Species #> [1] \"species\" #>  var_label(iris) <- list(   Petal.Width = \"width of the petal\",   Petal.Length = \"length of the petal\",   Sepal.Width = NULL,   Sepal.Length = NULL ) var_label(iris) #> $Sepal.Length #> NULL #>  #> $Sepal.Width #> NULL #>  #> $Petal.Length #> [1] \"length of the petal\" #>  #> $Petal.Width #> [1] \"width of the petal\" #>  #> $Species #> [1] \"species\" #>  var_label(iris, null_action = \"fill\") #> $Sepal.Length #> [1] \"Sepal.Length\" #>  #> $Sepal.Width #> [1] \"Sepal.Width\" #>  #> $Petal.Length #> [1] \"length of the petal\" #>  #> $Petal.Width #> [1] \"width of the petal\" #>  #> $Species #> [1] \"species\" #>  var_label(iris, null_action = \"skip\") #> $Petal.Length #> [1] \"length of the petal\" #>  #> $Petal.Width #> [1] \"width of the petal\" #>  #> $Species #> [1] \"species\" #>  var_label(iris, unlist = TRUE) #>          Sepal.Length           Sepal.Width          Petal.Length  #>                    \"\"                    \"\" \"length of the petal\"  #>           Petal.Width               Species  #>  \"width of the petal\"             \"species\"   # if (require(dplyr)) {   # adding some variable labels   df <- tibble(s1 = c(\"M\", \"M\", \"F\"), s2 = c(1, 1, 2)) %>%     set_variable_labels(s1 = \"Sex\", s2 = \"Yes or No?\")   var_label(df)    # removing a variable label   df <- df %>% set_variable_labels(s2 = NULL)   var_label(df$s2)    # Set labels from dictionary, e.g. as read from external file   # One description is missing, one has no match   description <- tibble(     name = c(       \"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\",       \"Something\"     ),     label = c(       \"Sepal length\", \"Sepal width\", \"Petal length\", \"Petal width\",       \"something\"     )   )   var_labels <- stats::setNames(as.list(description$label), description$name)   iris_labelled <- iris %>%     set_variable_labels(.labels = var_labels, .strict = FALSE)   var_label(iris_labelled)    # defining variable labels derived from variable names   if (require(snakecase)) {     iris <- iris %>%       set_variable_labels(.labels = to_sentence_case(names(iris)))     var_label(iris)   }    # example with a vector   v <- 1:5   v <- v %>% set_variable_labels(\"a variable label\")   v   v %>% set_variable_labels(NULL) } #> Loading required package: snakecase #> [1] 1 2 3 4 5"},{"path":[]},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2160","dir":"Changelog","previous_headings":"","what":"labelled 2.16.0","title":"labelled 2.16.0","text":"CRAN release: 2025-10-22 New features new function to_gt() converting result look_for() nicely formatted table (#189) new functions dictionary_to_variable_labels() dictionary_to_value_labels() convert dictionary data frame list variable / value labels (#183) new .overwrite argument set_variable_labels() set_value_labels() (#183) new sep argument names_prefixed_by_values() new arguments (sep_value_labels sep_other) convert_list_columns_to_character() lookfor_to_long_format() Bug fix copy_labels() now less restrictive accept tibble list columns (#187)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2150","dir":"Changelog","previous_headings":"","what":"labelled 2.15.0","title":"labelled 2.15.0","text":"CRAN release: 2025-09-16 New features labelled functions now compatible survey design objects created survey package (#174) argument user_na_to_na added to_factor.data.frame() (#178)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2141","dir":"Changelog","previous_headings":"","what":"labelled 2.14.1","title":"labelled 2.14.1","text":"CRAN release: 2025-05-06 Bug fix fix bug introduced 2.14.0 set_variable_labels() using .labels argument (#171)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2140","dir":"Changelog","previous_headings":"","what":"labelled 2.14.0","title":"labelled 2.14.0","text":"CRAN release: 2025-01-08 New features update_variable_labels_with(), now possible access variable name inside .fn using names() (#163) var_label() gets new options \"na\" \"empty\" null_action Improvements systematic use cli errors, warnings messages (#167)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2130","dir":"Changelog","previous_headings":"","what":"labelled 2.13.0","title":"labelled 2.13.0","text":"CRAN release: 2024-04-23 New features add null_action argument val_labels(), val_label() .null_action argument set_value_labels(), add_value_labels() remove_value_labels() (#145) new functions update_variable_labels_with() update_value_labels_with() allowing update variable/value labels custom function (#153) Bug fix avoid error print.look_for() console pane physically shrunk small (#148) fix recode.haven_labelled() .x contains NA .combine_value_labels = TRUE (#151) produce error trying assign value labels Date vector (#156)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2120","dir":"Changelog","previous_headings":"","what":"labelled 2.12.0","title":"labelled 2.12.0","text":"CRAN release: 2023-06-21 New features support variable labels packed columns, see dedicated vignette (#142) new helpers label_attribute(), get_label_attribute() set_label_attribute() manipulate “label” attribute object (#142) new functions get_variable_labels(), get_value_labels(), get_na_values() get_na_range() identical var_label(), val_labels(), na_values() na_range(), respectively to_character() method data frames (#140)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2110","dir":"Changelog","previous_headings":"","what":"labelled 2.11.0","title":"labelled 2.11.0","text":"CRAN release: 2023-04-11 Improvements set_value_labels(), add_value_labels(), remove_value_labels(), set_variable_labels(), set_na_range() set_na_values() can now applied vector (#126) new argument null_action var_label() applied data frame (#131) look_for() now returns \"missing\" (number NAs) default (#133) Bug fixes bug fix print.look_for() (#135) bug fix unlabelled() classic vectors, now remained unchanged (#137)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-2100","dir":"Changelog","previous_headings":"","what":"labelled 2.10.0","title":"labelled 2.10.0","text":"CRAN release: 2022-09-14 look_for() now accepts survey objects (#121)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-291","dir":"Changelog","previous_headings":"","what":"labelled 2.9.1","title":"labelled 2.9.1","text":"CRAN release: 2022-05-05 improved error messages missing variable names (#118, @ajb5d) better implementation look_for() keyword provided (#116) bug fix user_na_to_tagged_na() (#114)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-290","dir":"Changelog","previous_headings":"","what":"labelled 2.9.0","title":"labelled 2.9.0","text":"CRAN release: 2021-10-29 look_for() improvements: new function look_for_and_select() (#87) look_for() can now search within factor levels value labels (#104) improvements tagged NAs: better printing value labels (#89) new functions user_na_to_tagged_na(), tagged_na_to_user_na() tagged_na_to_regular_na() new option explicit_tagged_na to_factor() to_character() new functions unique_tagged_na(), duplicated_tagged_na(), order_tagged_na(), sort_tagged_na() (#90, #91) improvements: new functions is_user_na() is_regular_na() new set unit tests (#99) trying apply value label, na_range() na_values() factor now produce error bug fix foreign_to_labelled() Stata files (#100)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-280","dir":"Changelog","previous_headings":"","what":"labelled 2.8.0","title":"labelled 2.8.0","text":"CRAN release: 2021-03-08 new helper recode_if() recoding values based condition, variable value labels preserved (#82) look_for() time consuming big data frames. Now, default, basic details variable computed. can compute details details = \"full\" (#77) printing look_for() results updated rely anymore pillar (#85) to_labelled() can properly manage factors whose levels coded “[code] level”, produced to_factor(levels = \"prefixed\") (#74 @courtiol) new function is_prefixed() check factor prefixed bug fix na_range<- na_values<- applied data.frame (#80)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-270","dir":"Changelog","previous_headings":"","what":"labelled 2.7.0","title":"labelled 2.7.0","text":"CRAN release: 2020-09-21 .values argument added set_na_values() set_na_range(), allowing pass list values .strict option added set_variable_labels(), set_value_labels(), add_value_labels(), remove_value_labels(), set_na_values() set_na_range(), allowing pass values columns observed data (useful using list labels several data.frame sharing variables) (#70) copy_labels() less restrictive non labelled vectors, copying variable label even two vectors type (#71) .strict option added copy_labels() (#71)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-260","dir":"Changelog","previous_headings":"","what":"labelled 2.6.0","title":"labelled 2.6.0","text":"CRAN release: 2020-08-27 look_for() now returns tibble columns multiple values variable now stored named lists print method added clearer presentation results console use lookfor_to_long_format() convert results one row per factor level per value label use convert_list_columns_to_character() convert list columns simpler character vectors generate_dictionary() equivalent look_for() set_variable_labels, set_value_labels, add_value_labels, remove_value_labels now accept “tidy dots” (#67 @psanker) new function names_prefixed_by_values() get names vector prefixed corresponding value","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-250","dir":"Changelog","previous_headings":"","what":"labelled 2.5.0","title":"labelled 2.5.0","text":"CRAN release: 2020-06-17 new .keep_value_labels argument recode.haven_labelled() new .combine_value_labels argument recode.haven_labelled() (#61) new drop_unused_value_labels() method additional .labels argument set_value_labels() user_na_to_na argument added to_character.haven_labelled() %>% now imported dplyr cheatsheet added (#47) internal documentation now using roxygen2 markdown support","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-240","dir":"Changelog","previous_headings":"","what":"labelled 2.4.0","title":"labelled 2.4.0","text":"CRAN release: 2020-05-25 fixes haven 2.3.0 (#59 @hadley) correct re-export functions haven update_labelled() improved allow reconstruct labelled vectors created previous version haven","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-231","dir":"Changelog","previous_headings":"","what":"labelled 2.3.1","title":"labelled 2.3.1","text":"CRAN release: 2020-04-29 additional argument keep_var_label remove_labels() bug fix unlabelled() applied vector using unclass = TRUE to_factor(), attributes removed anymore","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-230","dir":"Changelog","previous_headings":"","what":"labelled 2.3.0","title":"labelled 2.3.0","text":"CRAN release: 2020-04-27 new function unlabelled()","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-222","dir":"Changelog","previous_headings":"","what":"labelled 2.2.2","title":"labelled 2.2.2","text":"CRAN release: 2020-02-03 bug fix look_for() (#52 @NoahMarconi) bug fix val_labels_to_na() documentation","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-221","dir":"Changelog","previous_headings":"","what":"labelled 2.2.1","title":"labelled 2.2.1","text":"CRAN release: 2019-05-26 bug fix na_range() na_values(): variable labels now preserved (#48, thanks @mspittler)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-220","dir":"Changelog","previous_headings":"","what":"labelled 2.2.0","title":"labelled 2.2.0","text":"CRAN release: 2019-04-16 new function copy_labels_from(), compliant dplyr syntax update_labelled() now strict (#42 @iago-pssjd) new functions look_for() lookfor() imported questionr (#44) new unlist option var_label() tagged_na() similar functions now imported haven","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-210","dir":"Changelog","previous_headings":"","what":"labelled 2.1.0","title":"labelled 2.1.0","text":"CRAN release: 2019-02-25 var_label(), applied data.frame, now accepts character vector length number columns. set_variable_labels new .labels argument. New unclass option to_factor(), used strict = TRUE (#36) Following haven version 2.1.0, mandatory anymore define value label defining SPSS style missing value. labelled_spss(), na_values() na_range() updated accordingly (#37)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-202","dir":"Changelog","previous_headings":"","what":"labelled 2.0.2","title":"labelled 2.0.2","text":"CRAN release: 2019-01-18 to_factor() bug fix applied data.frame (#33)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-201","dir":"Changelog","previous_headings":"","what":"labelled 2.0.1","title":"labelled 2.0.1","text":"CRAN release: 2018-11-25 update_labelled() bug fix applied data.frame (#31)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-200","dir":"Changelog","previous_headings":"","what":"labelled 2.0.0","title":"labelled 2.0.0","text":"CRAN release: 2018-11-23","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"breaking-change-2-0-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGE","title":"labelled 2.0.0","text":"Following version 2.0.0 haven, labelled() labelled_spss() now produce objects class “haven_labelled” “haven_labelled_spss”, due conflict previous “labelled” class “labelled” class used Hmisc. new function update_labelled() used convert data imported older version haven new classes.","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"other-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"labelled 2.0.0","text":"user_na_to_na option added to_factor() foreign_to_labelled() now import SPSS missing values (#27) strict argument added to_factor() (#25) remove_attributes() preserve character vectors (#30)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-110","dir":"Changelog","previous_headings":"","what":"labelled 1.1.0","title":"labelled 1.1.0","text":"CRAN release: 2018-05-24 extend dplyr::recode() method compatible labelled vectors. copy_labels() now copy also na_range na_values attributes. new method remove_attributes()","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-101","dir":"Changelog","previous_headings":"","what":"labelled 1.0.1","title":"labelled 1.0.1","text":"CRAN release: 2017-12-19 bug fix: argument drop_unused_labels now used to_factor.data.frame() new labels argument to_labelled() method applied factor bug fix: appropriate column names data.frame (#20)","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-100","dir":"Changelog","previous_headings":"","what":"labelled 1.0.0","title":"labelled 1.0.0","text":"CRAN release: 2016-11-20 now imports haven new function deal user defined missing values (SPSS style): na_values(), na_range(), set_na_values(), set_na_values(), remove_user_na(), user_na_to_na(). remove_labels() updated.","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-023","dir":"Changelog","previous_headings":"","what":"labelled 0.2.3","title":"labelled 0.2.3","text":"CRAN release: 2016-06-21 new functions set_variable_labels(), set_value_labels(), add_value_labels() remove_value_labels() compatible %>%. new functions remove_val_labels remove_var_label(). bug fix to_character.labelled() applied data frames.","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-022","dir":"Changelog","previous_headings":"","what":"labelled 0.2.2","title":"labelled 0.2.2","text":"CRAN release: 2016-06-15 to_factor(), to_character() to_labelled.factor() now preserves variable label. bug fix to_factor() applied data frames.","code":""},{"path":"https://larmarange.github.io/labelled/dev/news/index.html","id":"labelled-020","dir":"Changelog","previous_headings":"","what":"labelled 0.2.0","title":"labelled 0.2.0","text":"Following evolution haven, labelled doesn’t support missing values anymore (cf. https://github.com/hadley/haven/commit/4b12ff9d51ddb9e7486966b85e0bcff44992904d) New function to_character() (cf. https://github.com/larmarange/labelled/commit/3d32852587bb707d06627e56407eed1c9d5a49de) to_factor() now applied data.frame (cf. https://github.com/larmarange/labelled/commit/ce1d750681fe0c9bcd767cb83a8d72ed4c5fc5fb) data.table available, labelled attribute now changed reference (cf. https://github.com/larmarange/labelled/commit/c8b163f706122844d798e6625779e8a65e5bbf41) zap_labels() added synonym remove_labels()","code":""}]
